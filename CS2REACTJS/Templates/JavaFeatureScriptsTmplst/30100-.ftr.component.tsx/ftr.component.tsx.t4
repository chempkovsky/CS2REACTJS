<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="tsx" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2REACTJS" #>
<#@ import namespace="CS2REACTJS.Model" #>
<#@ import namespace="CS2REACTJS.Model.Serializable" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.AllowedFileTypesSerializable" name="AllowedFileTypes" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.FeatureContextSerializable" name="FeatureContext" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.FeatureSerializable" name="Feature" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.DbContextSerializable" name="Context" #>

<#
  
    string featureComponentFolder                   = "30100-.ftr.component.tsx";
    string featureClassName                         = GetFeatureComponentClassName(Feature, featureComponentFolder);

    string featureCssComponentFolder                = "30100-.ftr.component.css";

    string appGlblSettingsContextFolder             = "00029-app-glbl-settings.context.tsx";
    string appGlblSettingsContextClassName          = GetContextContextName(Context, appGlblSettingsContextFolder);

    string webServiceFilterEventDataModelFolder     = "00062-web-service-filter-event.interface.tsx";
    string webServiceFilterEventDataModelClassName  = GetContextInterfaceName(Context, webServiceFilterEventDataModelFolder);

    string webServiceFilterMenuDataModelFolder      = "00063-web-service-filter-menu.interface.tsx";
    string webServiceFilterMenuDataModelClassName   = GetContextInterfaceName(Context, webServiceFilterMenuDataModelFolder);

    string currFlexScreenFunctionFolder             = "00044-curr-flex-screen.tsx";
    string currFlexScreenFunctionName               = GetContextFunctionName(Context, currFlexScreenFunctionFolder);


    string CanAddPropName                           = "canAdd";
    string CanUpdPropName                           = "canUpdate";
    string CanDelPropName                           = "canDelete";
    string ShowAddFltItemPropName                   = "showAddFltItem";
    string ShowFilterPropName                       = "showFilter";
    string CaptionPropName                          = "caption";
    string CanAddDetailPropName                     = "canDetailAdd";
    string CanUpdDetailPropName                     = "canDetailUpdate";
    string CanDelDetailPropName                     = "canDetailDelete";
    string ShowDetailAddFltItemPropName             = "showDetailAddFltItem";
    string ShowDetailFilterPropName                 = "showDetailFilter";
    string OnContMenuItemMethodName                 = "onContMenuItem";
    string ShowBackBtnPropName                      = "showBackBtn";
    string PermsPropName                            = "perms";


    string curBreakPointPropName                    = "curBp";
    string isExpPropName                            = "isExp";
    string colspanPropName                          = "colSpan";
    string rowspanPropName                          = "rowSpan";
    string MaxHeightPropName                        = "maxHeight";
    string FilterMaxHeightPropName                  = "filterMaxHeight";
    string ContMenuItemsPropName                    = "contMenuItems";


    int FeatureItemsCount = 0;
    if(Feature.FeatureItems!=null) {
        FeatureItemsCount = Feature.FeatureItems.Count;
    }

#>

import React, { Component, Suspense, lazy } from 'react';
import { Typography } from '@material-ui/core';
import { Route, RouteComponentProps } from 'react-router-dom';
import '<#= GetFeatureFolderName(Feature, featureCssComponentFolder, featureComponentFolder)#>.css';
import <#= appGlblSettingsContextClassName #> from '<#= GetFeatureCommonFolderName(Feature, Context, appGlblSettingsContextFolder, featureComponentFolder) #>';
import <#= webServiceFilterMenuDataModelClassName #> from "<#= GetFeatureCommonFolderName(Feature, Context, webServiceFilterMenuDataModelFolder, featureComponentFolder) #>";
import <#= webServiceFilterEventDataModelClassName #> from "<#= GetFeatureCommonFolderName(Feature, Context, webServiceFilterEventDataModelFolder, featureComponentFolder) #>";
import <#= currFlexScreenFunctionName #> from "<#= GetFeatureCommonFolderName(Feature, Context, currFlexScreenFunctionFolder, featureComponentFolder) #>";
<# 
    foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
        ModelViewSerializable modelViewSerializable = GetModelViewByName(Context, featureItemSerializable.ViewName);
            if(modelViewSerializable == null) {
#>
// Error: Could not find <#= featureItemSerializable.ViewName #> Model-View  by name 
<#
                continue;
            }
#>
const  <#= GetModelComponentClassName(modelViewSerializable, featureItemSerializable.FileType) #>  = lazy(() => import('<#= GetFeatureToModelFolderName(Feature, Context, featureItemSerializable.ViewName,  featureItemSerializable.FileType, featureComponentFolder)#>'));
<#
    }
#>        

export interface <#= featureClassName + "State" #> {
    <#= curBreakPointPropName #>: number;
    <#= isExpPropName #>: boolean[];
    <#= colspanPropName #>: number[][];
    <#= rowspanPropName #>: number[][];
    <#= MaxHeightPropName #>: number[][];
    <#= FilterMaxHeightPropName #>: number[][];
    <#= ContMenuItemsPropName #>: <#= webServiceFilterMenuDataModelClassName #>[][];
    <#= PermsPropName #>: boolean[];
}

export default class <#= featureClassName #> extends Component<RouteComponentProps<any>, <#= featureClassName + "State" #>> {
    static contextType = <#= appGlblSettingsContextClassName #>;
    <#= isExpPropName #>: boolean[] = [<#= GetAllFeatureDefaultIsExp(Feature) #>];
    <#= colspanPropName #>: number[][]= [
<#
    {
        int curItem = -1;
        bool rotedInserted = false;
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            curItem++;
            AllowedFileTypeSerializable allowedFileType = GetAllowedFileType(AllowedFileTypes, featureItemSerializable.FileType);
            if(allowedFileType == null) {
#>
// Error: Could not find file AllowedFileType by given FileType= <#= featureItemSerializable.FileType #>
            [0, 0, 0, 0, 0, 0],
<#
            } else {
#>
            [<#= allowedFileType.ColLargeBreakpointMult * allowedFileType.DefaultCols #>, <#= allowedFileType.ColLargeBreakpointMult #>, <#= allowedFileType.ColSmallBreakpointMult #>, <#= allowedFileType.DefaultCols #>, <#= allowedFileType.DefaultCols #>, <#= allowedFileType.ExpandCols #>],
<#
            }
        }
    }
#>
        ];
    <#= rowspanPropName #>: number[][]= [
<#
    {
        int curItem = -1;
        bool rotedInserted = false;
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            curItem++;
            AllowedFileTypeSerializable allowedFileType = GetAllowedFileType(AllowedFileTypes, featureItemSerializable.FileType);
            if(allowedFileType == null) {
#>
// Error: Could not find file AllowedFileType by given FileType= <#= featureItemSerializable.FileType #>
            [0, 0, 0, 0, 0, 0],
<#
            } else {
#>
            [<#= allowedFileType.RowLargeBreakpointMult * allowedFileType.DefaultRows #>,  <#= allowedFileType.RowLargeBreakpointMult #>, <#= allowedFileType.RowSmallBreakpointMult #>, <#= allowedFileType.DefaultRows #>, <#= allowedFileType.DefaultRows #>, <#= allowedFileType.ExpandRows #>],
<#
            }
        }
    }
#>
        ];
    <#= MaxHeightPropName #>: number[][]= [
<#
    {
        int curItem = -1;
        bool rotedInserted = false;
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            curItem++;
            AllowedFileTypeSerializable allowedFileType = GetAllowedFileType(AllowedFileTypes, featureItemSerializable.FileType);
            if(allowedFileType == null) {
#>
// Error: Could not find file AllowedFileType by given FileType= <#= featureItemSerializable.FileType #>
            [0, 0, 0],
<#
            } else {
#>
            [<#= allowedFileType.DefaultMaxHeight #>, <#= allowedFileType.DefaultMaxHeight #>, <#= allowedFileType.ExpandMaxHeight #>],
<#
            }
        }
    }
#>
        ];
    <#= FilterMaxHeightPropName #>: number[][]= [
<#
    {
        int curItem = -1;
        bool rotedInserted = false;
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            curItem++;
            AllowedFileTypeSerializable allowedFileType = GetAllowedFileType(AllowedFileTypes, featureItemSerializable.FileType);
            if(allowedFileType == null) {
#>
// Error: Could not find file AllowedFileType by given FileType= <#= featureItemSerializable.FileType #>
            [0, 0, 0],
<#
            } else {
#>
            [<#= allowedFileType.DefaultFilterMaxHeight #>, <#= allowedFileType.DefaultFilterMaxHeight #>, <#= allowedFileType.ExpandFilterMaxHeight #>],
<#
            }
        }
    }
#>
        ];


    constructor(props: any) {
        super(props);
        this.state = {
            <#= curBreakPointPropName #>: 1,

            <#= isExpPropName #>: [<#= GetAllFeatureDefaultIsExp(Feature) #>],
            <#= colspanPropName #>: [
<#
    {
        int curItem = -1;
        bool rotedInserted = false;
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            curItem++;
            AllowedFileTypeSerializable allowedFileType = GetAllowedFileType(AllowedFileTypes, featureItemSerializable.FileType);
            if(allowedFileType == null) {
#>
// Error: Could not find file AllowedFileType by given FileType= <#= featureItemSerializable.FileType #>
                [0, 0, 0, 0, 0, 0],
<#
            } else {
#>
                [<#= allowedFileType.ColLargeBreakpointMult * allowedFileType.DefaultCols #>, <#= allowedFileType.ColLargeBreakpointMult #>, <#= allowedFileType.ColSmallBreakpointMult #>, <#= allowedFileType.DefaultCols #>, <#= allowedFileType.DefaultCols #>, <#= allowedFileType.ExpandCols #>],
<#
            }
        }
    }
#>
            ],
            <#= rowspanPropName #>: [
<#
    {
        int curItem = -1;
        bool rotedInserted = false;
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            curItem++;
            AllowedFileTypeSerializable allowedFileType = GetAllowedFileType(AllowedFileTypes, featureItemSerializable.FileType);
            if(allowedFileType == null) {
#>
// Error: Could not find file AllowedFileType by given FileType= <#= featureItemSerializable.FileType #>
                [0, 0, 0, 0, 0, 0],
<#
            } else {
#>
                [<#= allowedFileType.RowLargeBreakpointMult * allowedFileType.DefaultRows #>,  <#= allowedFileType.RowLargeBreakpointMult #>, <#= allowedFileType.RowSmallBreakpointMult #>, <#= allowedFileType.DefaultRows #>, <#= allowedFileType.DefaultRows #>, <#= allowedFileType.ExpandRows #>],
<#
            }
        }
    }
#>
            ],
            <#= MaxHeightPropName #>: [
<#
    {
        int curItem = -1;
        bool rotedInserted = false;
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            curItem++;
            AllowedFileTypeSerializable allowedFileType = GetAllowedFileType(AllowedFileTypes, featureItemSerializable.FileType);
            if(allowedFileType == null) {
#>
// Error: Could not find file AllowedFileType by given FileType= <#= featureItemSerializable.FileType #>
                [0, 0, 0],
<#
            } else {
#>
                [<#= allowedFileType.DefaultMaxHeight #>, <#= allowedFileType.DefaultMaxHeight #>, <#= allowedFileType.ExpandMaxHeight #>],
<#
            }
        }
    }
#>
            ],
            <#= FilterMaxHeightPropName #>: [
<#
    {
        int curItem = -1;
        bool rotedInserted = false;
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            curItem++;
            AllowedFileTypeSerializable allowedFileType = GetAllowedFileType(AllowedFileTypes, featureItemSerializable.FileType);
            if(allowedFileType == null) {
#>
// Error: Could not find file AllowedFileType by given FileType= <#= featureItemSerializable.FileType #>
                [0, 0, 0],
<#
            } else {
#>
                [<#= allowedFileType.DefaultFilterMaxHeight #>, <#= allowedFileType.DefaultFilterMaxHeight #>, <#= allowedFileType.ExpandFilterMaxHeight #>],
<#
            }
        }
    }
#>
            ],
            <#= ContMenuItemsPropName #>: [
<#
    {
        int curItem = -1;
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            curItem++;
#>
                [  {id: '<#= curItem #>', caption: 'expand(collapse)', iconName: 'aspect_ratio', iconColor: 'primary', enabled: true } ],
<#
        }
    }
#>
            ],
            
            <#= PermsPropName #>: [
<#
    {
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
#>
              true ,
<#
        }
    }
#>
            ],
        }
        this.<#= OnContMenuItemMethodName #> = this.<#= OnContMenuItemMethodName #>.bind(this);
        this.updateSettings = this.updateSettings.bind(this);
        this.handleResize = this.handleResize.bind(this);
        this.onPermMask = this.onPermMask.bind(this);
        this.onNavError = this.onNavError.bind(this);
    }

    updateSettings() {
        let i: number;
        for (i = 0; i <  <#= FeatureItemsCount #>; i++) {
            this.<#= colspanPropName #>[i][0] = this.<#= isExpPropName #>[i] ? this.<#= colspanPropName #>[i][3] : this.<#= colspanPropName #>[i][this.state.<#= curBreakPointPropName #>] * this.<#= colspanPropName #>[i][3];
            this.<#= rowspanPropName #>[i][0] = this.<#= isExpPropName #>[i] ? this.<#= rowspanPropName #>[i][3] : this.<#= rowspanPropName #>[i][this.state.<#= curBreakPointPropName #>] * this.<#= rowspanPropName #>[i][3];
        }
        this.setState({<#= colspanPropName #>: this.<#= colspanPropName #>, <#= rowspanPropName #>: this.<#= rowspanPropName #>, <#= isExpPropName #>: this.<#= isExpPropName #>, <#= MaxHeightPropName #>: this.<#= MaxHeightPropName #>, <#= FilterMaxHeightPropName #>: this.<#= FilterMaxHeightPropName #>});
    }

    <#= OnContMenuItemMethodName #>(v: <#= webServiceFilterEventDataModelClassName #>) {
        let setDefault = true;
        let locId = parseInt(v.id);
        this.<#= isExpPropName #>[locId] = !(this.<#= isExpPropName #>[locId]);
        if(this.<#= isExpPropName #>[locId]) {
            setDefault = false;
            this.<#= colspanPropName #>[locId][3] = this.<#= colspanPropName #>[locId][5];
            this.<#= rowspanPropName #>[locId][3] = this.<#= rowspanPropName #>[locId][5];
            this.<#= MaxHeightPropName #>[locId][0] = this.<#= MaxHeightPropName #>[locId][2];
            this.<#= FilterMaxHeightPropName #>[locId][0] = this.<#= FilterMaxHeightPropName #>[locId][2];
            let i: number;
            for (i = 0; i < locId; i++) {
                this.<#= colspanPropName #>[i][3] = 0;
                this.<#= rowspanPropName #>[i][3] = 0;
            }
            for (i = locId+1; i < <#= FeatureItemsCount #>; i++) {
                this.<#= colspanPropName #>[i][3] = 0;
                this.<#= rowspanPropName #>[i][3] = 0;
            }
        }
        if(setDefault) {
            let i: number;
            for (i = 0; i <  <#= FeatureItemsCount #>; i++) {
                this.<#= colspanPropName #>[i][3] = this.<#= colspanPropName #>[i][4];
                this.<#= rowspanPropName #>[i][3] = this.<#= rowspanPropName #>[i][4];
                this.<#= MaxHeightPropName #>[i][0] = this.<#= MaxHeightPropName #>[i][1];
                this.<#= FilterMaxHeightPropName #>[i][0] = this.<#= FilterMaxHeightPropName #>[i][1];
            }
        }
        this.updateSettings();
    }
    handleResize() {
        let <#= curBreakPointPropName #> = 2;
        const cfs: string = <#= currFlexScreenFunctionName #>();
        if(cfs === 'lg') { <#= curBreakPointPropName #> = 1; }
        if(<#= curBreakPointPropName #> !== this.state.<#= curBreakPointPropName #>) {
            this.setState({<#= curBreakPointPropName #>: <#= curBreakPointPropName #>}, this.updateSettings);
        }
    }
    onNavError(): void {
        let msg = {
            message:'Incorrect Url.'
        };
        this.context.showError('Navigation Error', msg)
        if(this.props.history) {
            this.props.history.push("/");
        }
    }
    onPermMask() {
        const permMask: number = this.context.getDashBrdMask('<#= featureClassName #>');
        if (!((permMask & 1) === 1)) {
            return false;
        }
        return true;
    }
    componentDidUpdate() {
        if(!this.onPermMask()) {
            this.onNavError();
            return;
        }
    }
   componentDidMount() {
        window.addEventListener('resize', this.handleResize);
        if(!this.onPermMask()) {
            this.onNavError();
            return;
        }
        let <#= PermsPropName #>: boolean[] = [
<#
    {
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
#>
            (this.context.getViewModelMask('<#= featureItemSerializable.ViewName #>') & 1) === 1,
<#
        }
    }
#>
        ];
        this.setState({ <#= PermsPropName #>: <#= PermsPropName #> });
        this.updateSettings();
    }
    componentWillUnmount() {
        window.removeEventListener('resize', this.handleResize);
    }
    render () {
        return(
            <div className="dashboard-grid-container">
                <Typography variant="h4" component="h5">Dashboard for <#= Feature.FeatureName #></Typography>
                <div className="gridlistcls">
<#
    {
        int curItem = -1;
        bool rotedInserted = false;
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            curItem++;
            ModelViewSerializable modelViewSerializable = GetModelViewByName(Context, featureItemSerializable.ViewName);
            if(modelViewSerializable == null) {
#>
{/* Error: Could not find <#= featureItemSerializable.ViewName #> Model-View  by name */}
<#
                continue;
            }
            bool isRouted = isRoutedItem(AllowedFileTypes, featureItemSerializable.FileType);
            if (isRouted && rotedInserted) {
#>
{/* Error: Only first Routed Item can be added:  <#=  featureItemSerializable.ViewName #> Model-View is a second one */}
<#
                continue;
            }

            if (isRouted) {
#>
                    <div  hidden={ (this.state.colSpan[<#= curItem #>][0] === 0) || this.state.<#= PermsPropName #>[<#= curItem #>]  }
                          style={{ gridColumnEnd: `span ${this.state.colSpan[<#= curItem #>][0]}`, gridRowEnd: `span ${this.state.rowSpan[<#= curItem #>][0]}` }}>
                          <Route  render={(props) => <Suspense fallback={<div>Loading...</div>}><<#= GetModelComponentClassName(modelViewSerializable, featureItemSerializable.FileType) #> {...props} 
                                <#= ContMenuItemsPropName #>={ this.state.<#= ContMenuItemsPropName #>[<#= curItem #>] }
                                <#= OnContMenuItemMethodName #>={this.<#= OnContMenuItemMethodName #>}
                                <#= MaxHeightPropName #>={ this.state.<#= MaxHeightPropName #>[<#= curItem #>][0] }
                                <#= FilterMaxHeightPropName #>={ this.state.<#= FilterMaxHeightPropName #>[<#= curItem #>][0] }
                                <#= ShowAddFltItemPropName #>={true} <#= ShowFilterPropName #>={true} <#= ShowBackBtnPropName #>={true}
                                <#= CanAddPropName #>={true} <#= CanUpdPropName #>={true} <#= CanDelPropName #>={true} 
                          /></Suspense>}/> 
                    </div>
<#
            } else {
#>
                    <div  hidden={ (this.state.colSpan[<#= curItem #>][0] === 0) || this.state.<#= PermsPropName #>[<#= curItem #>] }
                          style={{ gridColumnEnd: `span ${this.state.colSpan[<#= curItem #>][0]}`, gridRowEnd: `span ${this.state.rowSpan[<#= curItem #>][0]}` }}>
                        <Suspense fallback={<div>Loading...</div>}>
                         <<#= GetModelComponentClassName(modelViewSerializable, featureItemSerializable.FileType) #>
                            <#= ContMenuItemsPropName #>={ this.state.<#= ContMenuItemsPropName #>[<#= curItem #>] }
                            <#= OnContMenuItemMethodName #>={this.<#= OnContMenuItemMethodName #>}
                            <#= MaxHeightPropName #>={ this.state.<#= MaxHeightPropName #>[<#= curItem #>][0] }
                            <#= FilterMaxHeightPropName #>={ this.state.<#= FilterMaxHeightPropName #>[<#= curItem #>][0] }
                            <#= ShowAddFltItemPropName #>={true} <#= ShowFilterPropName #>={true}
                            <#= CaptionPropName #>='Title for <#= featureItemSerializable.ViewName #>' 
<#
    if( !string.IsNullOrEmpty( featureItemSerializable.FileType )) { 
        if( featureItemSerializable.FileType.StartsWith("01700-O2m", StringComparison.OrdinalIgnoreCase) ) {
#>
                            <#= CanAddPropName #>={false} <#= CanUpdPropName #>={false} <#= CanDelPropName #>={false} 
                            <#= CanAddDetailPropName #>={true} <#= CanUpdDetailPropName #>={true} <#= CanDelDetailPropName #>={true}
                            <#= ShowDetailAddFltItemPropName #>={true} <#= ShowDetailFilterPropName #>={true}
<#
        } else {
#>
                            <#= CanAddPropName #>={true} <#= CanUpdPropName #>={true} <#= CanDelPropName #>={true} 
<#
        }
    }
#>
                          />
                        </Suspense>
                    </div>
<#

            }
        }
    }
#>
                </div>
            </div>
        );
    }
}

<#+

    string GetRtOutletName(ModelViewSerializable model) {
        string result="rtoutlt";
        if (model == null) {
            return result;
        }
        return result + model.ViewName.ToLower();
    }
    string GetRdOutletName(ModelViewSerializable model) {
        string result="rdoutlt";
        if (model == null) {
            return result;
        }
        return result + model.ViewName.ToLower();
    }
    bool isComponentGenerated(ModelViewSerializable model, string fileType) {
        if(model == null) {
            return false;
        }
        if (model.CommonStaffs == null) {
            return false;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        return refItem != null;
    }
    string GetModelComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","-component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetContextContextName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".context","-context");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetContextInterfaceName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","-interface");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I"+sb.ToString();
    }
    string GetContextFunctionName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }
    string GetModelInterfaceName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","-interface");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I"+sb.ToString();
    }
    ModelViewSerializable GetModelViewByName(DbContextSerializable context, string viewName) {
        if ((context == null) || (string.IsNullOrEmpty(viewName))) {
            return null;
        }
        if (context.ModelViews == null) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
    }
    bool isRoutedItem(AllowedFileTypesSerializable allowedFileTypes, string fileType) {
        if( (allowedFileTypes == null) || string.IsNullOrEmpty(fileType)) {
            return false;
        }
        if(allowedFileTypes.Items == null) {
            return false;
        }
        AllowedFileTypeSerializable rslt= allowedFileTypes.Items.Where(i => i.FileType == fileType).FirstOrDefault();
        if(rslt == null) {
            return false;
        }
        return rslt.IsRouted;
    }
    string GetAllFeatureDefaultIsExp(FeatureSerializable  Feature) {
        if (Feature == null) return "";
        if (Feature.FeatureItems == null) return "";
        string rslt = "false";
        if(Feature.FeatureItems.Count < 2) return rslt;
        for(int i = 1; i< Feature.FeatureItems.Count;i++) {
            rslt += ", false";
        }
        return rslt;
    }
    AllowedFileTypeSerializable GetAllowedFileType(AllowedFileTypesSerializable allowedFileTypes, string fileType) {
        if( (allowedFileTypes == null) || string.IsNullOrEmpty(fileType)) {
            return null;
        }
        if(allowedFileTypes.Items == null) {
            return null;
        }
        return allowedFileTypes.Items.Where(i => i.FileType == fileType).FirstOrDefault();
    }
    string GetFeatureComponentClassName(FeatureSerializable feature, string fileType) {
        string result="";
        if ((feature == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (feature.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            feature.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component").Replace(".","-");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetFeatureFolderName(FeatureSerializable feature, string refFolder, string currFolder) {
        string result="./";
        if ((feature == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (feature.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            feature.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            feature.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetFeatureCommonFolderName(FeatureSerializable  feature, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((feature == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((feature.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }

        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            feature.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();

        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetFeatureToModelFolderName(FeatureSerializable  feature, DbContextSerializable context, string refViewName,  string refFolder, string currFolder) {
        string result="./";
        if ((feature == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder) || string.IsNullOrEmpty(refViewName)) {
            return result;
        }
        if ((feature.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        ModelViewSerializable refModel = context.ModelViews.Where(v => v.ViewName == refViewName).FirstOrDefault();
        if (refModel == null) {
            return result;
        }
        if (refModel.CommonStaffs == null)  {
            return result;
        }
        CommonStaffSerializable refItem= 
            refModel.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            feature.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

#>
