<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="tsx" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2REACTJS" #>
<#@ import namespace="CS2REACTJS.Model" #>
<#@ import namespace="CS2REACTJS.Model.Serializable" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string webServiceFilterPropsDataModelFolder     = "00065-web-service-filter-props.interface.tsx";
    string webServiceFilterPropsDataModelClassName  = GetModelInterfaceName(Model, webServiceFilterPropsDataModelFolder);

    string webServiceFilterDefDataModelFolder       = "00050-web-service-filter-def.interface.tsx";
    string webServiceFilterDefDataModelClassName    = GetModelInterfaceName(Model, webServiceFilterDefDataModelFolder);

    string webServiceFilterRsltDataModelFolder      = "00052-web-service-filter-rslt.interface.tsx";
    string webServiceFilterRsltDataModelClassName   = GetModelInterfaceName(Model, webServiceFilterRsltDataModelFolder);

    string webServiceFilterMenuDataModelFolder      = "00063-web-service-filter-menu.interface.tsx";
    string webServiceFilterMenuDataModelClassName   = GetModelInterfaceName(Model, webServiceFilterMenuDataModelFolder);

    string webServiceFilterEventDataModelFolder     = "00062-web-service-filter-event.interface.tsx";
    string webServiceFilterEventDataModelClassName  = GetModelInterfaceName(Model, webServiceFilterEventDataModelFolder);

    string HiddenFilterPropName                     = "hiddenFilter";

#>

import <#= webServiceFilterDefDataModelClassName #> from "<#= GetFolderName(Model, webServiceFilterDefDataModelFolder, webServiceFilterPropsDataModelFolder) #>";
import <#= webServiceFilterRsltDataModelClassName #> from "<#= GetFolderName(Model, webServiceFilterRsltDataModelFolder, webServiceFilterPropsDataModelFolder) #>";
import <#= webServiceFilterMenuDataModelClassName #> from "<#= GetFolderName(Model, webServiceFilterMenuDataModelFolder, webServiceFilterPropsDataModelFolder) #>";
import <#= webServiceFilterEventDataModelClassName #> from "<#= GetFolderName(Model, webServiceFilterEventDataModelFolder, webServiceFilterPropsDataModelFolder) #>";

export default interface <#= webServiceFilterPropsDataModelClassName #> {
    filterMaxHeight?: number;
    fltrs?: Array<<#= webServiceFilterDefDataModelClassName #>>;
    caption?: string;
    showBackBtn?: boolean;
    onBackBtn ?:  () => void;
    showAddFltItem?: boolean;
    showFilter?: boolean;
    <#= HiddenFilterPropName #>?: Array<<#= webServiceFilterRsltDataModelClassName #>>;
    contMenuItems?: Array<<#= webServiceFilterMenuDataModelClassName #>>;
    onContMenuItem?: (v: <#= webServiceFilterEventDataModelClassName #>) => void;
    onApplyFilterClicked?: (r: Array<<#= webServiceFilterRsltDataModelClassName #>>) => void;   
}

<#+
    string GetModelInterfaceName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","-interface");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I"+sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("", Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

#>