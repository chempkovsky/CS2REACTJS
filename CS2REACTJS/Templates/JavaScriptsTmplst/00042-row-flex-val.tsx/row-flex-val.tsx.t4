<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="tsx" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2REACTJS" #>
<#@ import namespace="CS2REACTJS.Model" #>
<#@ import namespace="CS2REACTJS.Model.Serializable" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string rowFlexValFunctionFolder         = "00042-row-flex-val.tsx";
    string rowFlexValFunctionName           = GetModelFunctionName(Model, rowFlexValFunctionFolder);
    string fxFlexRowValDataModelFolder      = "00036-fx-flex-row-val.interface.tsx";
    string fxFlexRowValDataModelClassName   = GetModelInterfaceName(Model, fxFlexRowValDataModelFolder);


#>

import <#= fxFlexRowValDataModelClassName #> from "<#= GetFolderName(Model, fxFlexRowValDataModelFolder, rowFlexValFunctionFolder) #>";

export default function <#= rowFlexValFunctionName #>(v: string): <#= fxFlexRowValDataModelClassName #> {
    let result: <#= fxFlexRowValDataModelClassName #> = {
        boxSizing: 'border-box',
        WebkitBoxFlex: 0,
        msFlex: '0 1 auto',
        flex: '0 1 auto',
        msFlexWrap: 'wrap',
        flexWrap: 'wrap', 
        WebkitFlexDirection: v,
        msFlexDirection: v,
        flexDirection: v,
        justifyContent: 'space-between',      
    }
    if (v==='row-reverse') {
        result.WebkitBoxDirection= 'reverse';
        result.WebkitBoxOrient= 'horizontal';
        result.MozBoxDirection= 'reverse';
        result.MozBoxOrient= 'horizontal';
    } else if (v==='column') {
        result.WebkitBoxDirection= 'normal';
        result.WebkitBoxOrient= 'vertical';
        result.MozBoxDirection= 'normal';
        result.MozBoxOrient= 'vertical';
    } else if (v==='column-reverse') {
        result.WebkitBoxDirection= 'reverse';
        result.WebkitBoxOrient= 'vertical';
        result.MozBoxDirection= 'reverse';
        result.MozBoxOrient= 'vertical';
    } else {
        result.WebkitBoxDirection= 'normal';
        result.WebkitBoxOrient= 'horizontal';
        result.MozBoxDirection= 'normal';
        result.MozBoxOrient= 'horizontal';
    }
    return result; 
}

<#+
    string GetModelInterfaceName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","-interface");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I"+sb.ToString();
    }
    string GetModelFunctionName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("", Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

#>