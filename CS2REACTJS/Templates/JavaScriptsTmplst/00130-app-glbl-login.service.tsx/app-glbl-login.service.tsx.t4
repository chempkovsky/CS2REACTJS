<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="tsx" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2REACTJS" #>
<#@ import namespace="CS2REACTJS.Model" #>
<#@ import namespace="CS2REACTJS.Model.Serializable" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string appLoginServiceFolder                    = "00130-app-glbl-login.service.tsx";
    string appLoginServiceClassName                 = GetServiceClassName(Model, appLoginServiceFolder);

    string appGlblSettingsServiceFolder             = "00028-app-glbl-settings.service.tsx";
    string appGlblSettingsServiceClassName          = GetServiceClassName(Model, appGlblSettingsServiceFolder);

    string appGlblHttpHlpDataModelFolder            = "00027-app-glbl-http-hlp.interface.tsx";
    string appGlblHttpHlpDataModelClassName         = GetModelInterfaceName(Model, appGlblHttpHlpDataModelFolder);

    string appRegisterInterfaceDataModelFolder      = "00118-app-glbl-register.interface.tsx";
    string appRegisterInterfaceDataModelClassName   = GetModelInterfaceName(Model, appRegisterInterfaceDataModelFolder);

    string appChngpswdInterfaceDataModelFolder      = "00116-app-glbl-chngpswd.interface.tsx";
    string appChngpswdInterfaceDataModelClassName   = GetModelInterfaceName(Model, appChngpswdInterfaceDataModelFolder);


    string getAuthInfoHeaderMethodName          = "getAuthInfoHeader";
    string getWebApiPrefixMethodName            = "getWebApiPrefix";
    string getSecurityWebApiPrefixMethodName    = "getSecurityWebApiPrefix";
    string getAuthInfoMethodName                = "getAuthInfo";

    string AppSettingServicePropName            = "appGlblSettings";

#>

import <#= appGlblHttpHlpDataModelClassName #> from "<#= GetFolderName(Model, appGlblHttpHlpDataModelFolder, appLoginServiceFolder) #>";
import <#= appRegisterInterfaceDataModelClassName #> from '<#= GetFolderName(Model, appRegisterInterfaceDataModelFolder, appLoginServiceFolder) #>';
import <#= appChngpswdInterfaceDataModelClassName #> from "<#= GetFolderName(Model, appChngpswdInterfaceDataModelFolder, appLoginServiceFolder) #>";

export default class <#= appLoginServiceClassName #>  {
    public static login(<#= AppSettingServicePropName #>: <#= appGlblHttpHlpDataModelClassName #>, usrNm: string, pssWrd: string): Promise<Response> {
        let serviceUrl: string = <#= AppSettingServicePropName #>.<#= getSecurityWebApiPrefixMethodName #>();   
        let headers: {[k: string]: any} = {'content-type': 'text/plain', 'accept': 'application/json, text/plain, */*'} ; 
        let info: any = <#= AppSettingServicePropName #>.<#= getAuthInfoMethodName #>();
        if(info) {
            if(info.token_type) {
                headers['Authorization']= info.token_type + ' ' +  info.access_token;
            }
        }
        let params: string = encodeURIComponent('username')   + '=' + encodeURIComponent(usrNm) 
                     + '&' + encodeURIComponent('password')   + '=' + encodeURIComponent(pssWrd)
                     + '&' + encodeURIComponent('grant_type') + '=' + encodeURIComponent('password');
        return fetch(serviceUrl.concat('token'), {
            method: "POST",
            headers: headers,
            body: params //JSON.stringify(params)
        });
    }
    public static logout(<#= AppSettingServicePropName #>: <#= appGlblHttpHlpDataModelClassName #>): Promise<Response> {
        let serviceUrl: string = <#= AppSettingServicePropName #>.<#= getSecurityWebApiPrefixMethodName #>();   
        let headers: {[k: string]: any} = <#= AppSettingServicePropName #>.<#= getAuthInfoHeaderMethodName #>();
        return fetch(serviceUrl.concat('api/Account/Logout'), {
            method: "POST",
            headers: headers
        });
    }
    public static register(<#= AppSettingServicePropName #>: <#= appGlblHttpHlpDataModelClassName #>, rqDt: <#= appRegisterInterfaceDataModelClassName #>): Promise<Response> {
        let serviceUrl: string = <#= AppSettingServicePropName #>.<#= getSecurityWebApiPrefixMethodName #>();   
        let headers: {[k: string]: any} = <#= AppSettingServicePropName #>.<#= getAuthInfoHeaderMethodName #>();
        return fetch(serviceUrl.concat('api/Account/Register'), {
            method: "POST",
            headers: headers,
            body: JSON.stringify(rqDt)
        });
    }
    public static changePassword(<#= AppSettingServicePropName #>: <#= appGlblHttpHlpDataModelClassName #>, chPwd: <#= appChngpswdInterfaceDataModelClassName #>): Promise<Response> {
        let serviceUrl: string = <#= AppSettingServicePropName #>.<#= getSecurityWebApiPrefixMethodName #>();   
        let headers: {[k: string]: any} = <#= AppSettingServicePropName #>.<#= getAuthInfoHeaderMethodName #>();
        return fetch(serviceUrl.concat('api/Account/ChangePassword'), {
            method: "POST",
            headers: headers,
            body: JSON.stringify(chPwd)
        });
    }

}

<#+
    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetModelInterfaceName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","-interface");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I"+sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("", Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

#>