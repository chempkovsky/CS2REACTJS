<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="tsx" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2REACTJS" #>
<#@ import namespace="CS2REACTJS.Model" #>
<#@ import namespace="CS2REACTJS.Model.Serializable" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2REACTJS.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string eformComponentDataModelFolder                = "01500-Eform.component.tsx";
    string eformComponentDataModelClassName             = GetModelComponentClassName(Model, eformComponentDataModelFolder);

    string viewInterfaceFolder                          = "01100-.interface.tsx";
    string viewInterfacePageFolder                      = "01200-Page.interface.tsx";
    string viewInterfaceFltFolder                       = "01300-Filter.interface.tsx";

    string viewServiceFolder                            = "01400-.service.tsx";
    string viewServiceClassName                         = GetServiceClassName(Model, viewServiceFolder);

    string sdlgComponentDataModelFolder                 = "01440-Sdlg.component.tsx";
    string sdlgPropsDataModelFolder                     = "01439-Sdlg-props.interface.tsx";

    string eformStateDataModelFolder                    = "01498-Eform-state.interface.tsx";
    string eformStateDataModelClassName                 = GetModelInterfaceName(Model, eformStateDataModelFolder);

    string eformPropsDataModelFolder                    = "01499-Eform-props.interface.tsx";
    string eformPropsDataModelClassName                 = GetModelInterfaceName(Model, eformPropsDataModelFolder);

    string dataFormattersModelFolder                    = "00023-data-formatters.tsx";
    string BinaryFormatterDataModelClassName            = "BinaryFormatter";
    string CurrencyFormatterDataModelClassName          = "CurrencyFormatter";
    string NumberFormatPropsDataModelClassName          = "NumberFormatProps";


    string fxFlexBaseRowCssClassFolder                  = "00030-fx-flex-base-row.css";
    string fxFlexBaseRowCssClassName                    = GetContextCssClassName(Context, fxFlexBaseRowCssClassFolder);

    string eformModeEnumlFolder                         = "00025-eform-mode.enum.tsx";
    string eformModeEnumName                            = GetContextEnumClassName(Context, eformModeEnumlFolder);

    string appGlblSettingsServiceFolder                 = "00028-app-glbl-settings.service.tsx";
    string appGlblSettingsServiceClassName              = GetContextServiceClassName(Context, appGlblSettingsServiceFolder);

    string appGlblSettingsContextFolder                 = "00029-app-glbl-settings.context.tsx";
    string appGlblSettingsContextClassName              = GetContextContextName(Context, appGlblSettingsContextFolder);

    string colFlexFunctionFolder                        = "00040-col-flex.tsx";
    string colFlexFunctionName                          = GetContextFunctionName(Context, colFlexFunctionFolder);
    string rowFlexFunctionFolder                        = "00043-row-flex.tsx";
    string rowFlexFunctionName                          = GetContextFunctionName(Context, rowFlexFunctionFolder);
    string currFlexScreenFunctionFolder                 = "00044-curr-flex-screen.tsx";
    string currFlexScreenFunctionName                   = GetContextFunctionName(Context, currFlexScreenFunctionFolder);

    string webServiceFilterRsltDataModelFolder          = "00052-web-service-filter-rslt.interface.tsx";
    string webServiceFilterRsltDataModelClassName       = GetContextInterfaceName(Context, webServiceFilterRsltDataModelFolder);

    string webServiceFilterMenuDataModelFolder          = "00063-web-service-filter-menu.interface.tsx";
    string webServiceFilterMenuDataModelClassName       = GetContextInterfaceName(Context, webServiceFilterMenuDataModelFolder);

    string validatorFnFolder                            = "00047-validator-fn.tsx";
    string validatorFnClassName                         = GetContextInterfaceName(Context, validatorFnFolder);

    string validatorsFolder                             = "00048-validators.tsx";
    string validatorsClassName                          = GetContextClassName(Context, validatorsFolder);

    string formControlValueFolder                       = "00049-form-control-value.tsx";
    string formControlValueClassName                    = GetContextClassName(Context, formControlValueFolder);

    string formControlStateFolder                       = "00110-form-control-state.tsx";
    string formControlStateClassName                    = GetContextInterfaceName(Context, formControlStateFolder);


    string HiddenFilterModalSufix                       = "HfMdl";
    string OpenModalSufix                               = "OpMdl";
    string ComboSufix                                   = "CmbCntrl";
    string TypeaheadSufix                               = "TphdCntrl";
    string CheckBoxSufix                                = "ChckBx";
    string NoSufix                                      = "";
    string ButtonSufix                                  = "BttnItm";
    string ButtonDisable                                = "BttnDsnbl";
    string SearchClickSufix                             = "SrchClck";
    string SearchCloseSufix                             = "SrchClose";

    string SearchDataSufix                              = "SrchData";
    string DisplayLabelProperty                         = "Name";
    string DisplayHintProperty                          = "Prompt";
    string HiddenFilterPropName                         = "hiddenFilter";
    string formServicePrefix                            = "frmSrv";
    string AppSettingServicePropName                    = "appGlblSettings";
    string ShowErrorMethodName                          = "showError";


    string GetOneMethodName                             = "getone";
    string GetWithFilterMethodName                      = "getwithfilter";
    string AddOneMethodName                             = "addone";
    string UpdateOneMethodName                          = "updateone";
    string DeleteOneMethodName                          = "deleteone";


    string CanAddPropName                               = "canAdd";
    string CanUpdPropName                               = "canUpdate";
    string CanDelPropName                               = "canDelete";
    string SelectedItemsPropName                        = "selectedItems";
    string MaxHeightPropName                            = "maxHeight";
    string FilterMaxHeightPropName                      = "filterMaxHeight";
    string ShowFilterPropName                           = "showFilter";

    string TypeaheadAddDisplaySufix                     = "AddDsplFn";
    string TypeaheadUpdDisplaySufix                     = "UpdDsplFn";
    string TypeaheadDelDisplaySufix                     = "DelDsplFn";

    string TitlePropName                                = "title";
    string TitleCaptionVal                              = "Select Item";

    string FormControlModelPropName                     = "eformControlModel";
    string EformModePropName                            = "eformMode";

    string BeforeSubmitPropName                         = "beforeSubmit";
    string AfterSubmitPropName                          = "afterSubmit";
    string OnContMenuItemMethodName                     = "onContMenuItem";
    string CaptionPropName                              = "caption";


    int percentEq100                                    = 99;
    int typeAheadNo                                     = 0;
    int dateTmPickNo                                    = 0;


    Dictionary<string, string> RegExps = new Dictionary<string, string>() {
            { "RegExpGuid"       , @"/(?im)^[{(]?[0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12}[)}]?$/" },
            { "RegExpInteger"    , @"/^[-+]?\d+$/" },
            { "RegExpFloat"      , @"/^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$/" },
            { "RegExpEmail"      , @"/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/" },
            { "RegExpCurrency"   , @"/(?=.*?\d)^\$?(([1-9]\d{0,2}(,\d{3})*)|\d+)?(\.\d{1,2})?$/" }
            };


    List<string> FKViewsDict =  GetFKViewsList(Model, Context, new List<string>());
    if (! FKViewsDict.Contains(Model.ViewName) ) {
        FKViewsDict.Add(Model.ViewName);
    }

    List<string> SDViewsDict = GetSearchDialogViewsList(Model, Context, new List<string>());


    bool ModeAddEqualUpdate = true;
    bool ModeAddEqualDelete = true;
    bool ModeUpdateEqualDelete = true;
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if (ModeAddEqualUpdate) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog)) {
                ModeAddEqualUpdate = (modelViewUIFormPropertySerializable.InputTypeWhenAdd == modelViewUIFormPropertySerializable.InputTypeWhenUpdate);
                if (ModeAddEqualUpdate) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd ))) {
                        ModeAddEqualUpdate =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                    }
                }
            }
        }
        if (ModeAddEqualDelete) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog)) {
                ModeAddEqualDelete = (modelViewUIFormPropertySerializable.InputTypeWhenAdd == modelViewUIFormPropertySerializable.InputTypeWhenDelete);
                if (ModeAddEqualDelete) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel ))) {
                        ModeAddEqualDelete =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                    }
                }
            }
        }
        if (ModeUpdateEqualDelete) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog)) {
                ModeUpdateEqualDelete = (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == modelViewUIFormPropertySerializable.InputTypeWhenDelete);
                if (ModeUpdateEqualDelete) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel ))) {
                        ModeUpdateEqualDelete =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                    }
                }
            }
        }
    }


#>

import React, { Component, CSSProperties } from 'react';
import TextField from '@material-ui/core/TextField';
import MenuItem from '@material-ui/core/MenuItem';
import IconButton from '@material-ui/core/IconButton';
import Icon from '@material-ui/core/Icon';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import Checkbox from '@material-ui/core/Checkbox';
import InputAdornment from '@material-ui/core/InputAdornment';
import Tooltip from '@material-ui/core/Tooltip';
import Autocomplete from '@material-ui/lab/Autocomplete';
import {PropTypes, debounce} from '@material-ui/core';
import '<#= GetCommonFolderName(Model, Context, fxFlexBaseRowCssClassFolder, eformComponentDataModelFolder) #>.css';
import MuiPickersUtilsProvider from '@material-ui/pickers/MuiPickersUtilsProvider';
import { KeyboardDatePicker} from '@material-ui/pickers/DatePicker';
import { KeyboardDateTimePicker }  from '@material-ui/pickers/DateTimePicker';
import DateFnsUtils from '@date-io/date-fns';

import <#= eformPropsDataModelClassName #>  from '<#= GetFolderName(Model, eformPropsDataModelFolder, eformComponentDataModelFolder)#>';
import <#= eformStateDataModelClassName #>  from '<#= GetFolderName(Model, eformStateDataModelFolder, eformComponentDataModelFolder)#>';
import <#= eformModeEnumName #> from "<#= GetCommonFolderName(Model, Context, eformModeEnumlFolder, eformComponentDataModelFolder) #>";
import { <#= BinaryFormatterDataModelClassName #>, <#= CurrencyFormatterDataModelClassName #>, <#= NumberFormatPropsDataModelClassName #> } from "<#= GetCommonFolderName(Model, Context, dataFormattersModelFolder, eformComponentDataModelFolder) #>";
import <#= colFlexFunctionName #> from "<#= GetCommonFolderName(Model, Context, colFlexFunctionFolder, eformComponentDataModelFolder) #>";
import <#= rowFlexFunctionName #> from "<#= GetCommonFolderName(Model, Context, rowFlexFunctionFolder, eformComponentDataModelFolder) #>";
import <#= webServiceFilterMenuDataModelClassName #> from "<#= GetCommonFolderName(Model, Context, webServiceFilterMenuDataModelFolder, eformComponentDataModelFolder) #>";
import <#= currFlexScreenFunctionName #> from "<#= GetCommonFolderName(Model, Context, currFlexScreenFunctionFolder, eformComponentDataModelFolder) #>";
import <#= formControlValueClassName #> from "<#= GetCommonFolderName(Model, Context, formControlValueFolder, eformComponentDataModelFolder) #>";
import <#= formControlStateClassName #> from "<#= GetCommonFolderName(Model, Context, formControlStateFolder, eformComponentDataModelFolder) #>";
import <#= validatorFnClassName #> from "<#= GetCommonFolderName(Model, Context, validatorFnFolder, eformComponentDataModelFolder) #>";
import <#= validatorsClassName #> from "<#= GetCommonFolderName(Model, Context, validatorsFolder, eformComponentDataModelFolder) #>";
import <#= webServiceFilterRsltDataModelClassName #> from "<#= GetCommonFolderName(Model, Context, webServiceFilterRsltDataModelFolder, eformComponentDataModelFolder) #>";
import <#= appGlblSettingsServiceClassName #> from "<#= GetCommonFolderName(Model, Context, appGlblSettingsServiceFolder, eformComponentDataModelFolder) #>";
import <#= appGlblSettingsContextClassName #> from '<#= GetCommonFolderName(Model, Context, appGlblSettingsContextFolder, eformComponentDataModelFolder) #>';

<#
    foreach(string viewNm in FKViewsDict) {
#>
import  <#=  GetInterfaceNameEx(Context, viewNm) #>  from '<#=  GetCrossComponentFolderName(Model, eformComponentDataModelFolder, Context, viewNm, viewInterfaceFolder) #>';
import  <#=  GetInterfacePageNameEx(Context, viewNm) #>  from '<#=  GetCrossComponentFolderName(Model, eformComponentDataModelFolder, Context, viewNm, viewInterfacePageFolder) #>';
import  <#=  GetInterfaceFilterNameEx(Context, viewNm) #>  from '<#= GetCrossComponentFolderName(Model, eformComponentDataModelFolder, Context, viewNm, viewInterfaceFltFolder) #>';
import  <#=  GetServiceClassNameEx(Context, viewNm, viewServiceFolder) #>  from '<#= GetCrossComponentFolderName(Model, eformComponentDataModelFolder, Context, viewNm, viewServiceFolder) #>';
<#
    }
    foreach(string viewNm in SDViewsDict) {
#>
import  <#=  GetComponentClassNameEx(Context, viewNm, sdlgComponentDataModelFolder) #>  from '<#= GetCrossComponentFolderName(Model, eformComponentDataModelFolder, Context, viewNm, sdlgComponentDataModelFolder) #>';
<#
        if (!FKViewsDict.Contains(viewNm)) {
#>
import  <#=  GetInterfaceNameEx(Context, viewNm) #>  from '<#=  GetCrossComponentFolderName(Model, eformComponentDataModelFolder, Context, viewNm, viewInterfaceFolder) #>';
<#
        }
    }
#>


export default class <#= eformComponentDataModelClassName #> extends Component<<#= eformPropsDataModelClassName #>, <#= eformStateDataModelClassName #>> {
    static contextType = <#= appGlblSettingsContextClassName #>;
    public <#= EformModePropName #>: <#= eformModeEnumName #> = <#= eformModeEnumName #>.<#= GetInputTypeToEnumName(3) #>;

<#  // scalar props
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if (IsBooleanInput(modelViewUIFormPropertySerializable, Model)) {
#>
    public <#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: <#= formControlValueClassName #> = new <#= formControlValueClassName #>(false, true, []);
<#    
        } else {
            if (IsIdentityPropertyEx(modelViewUIFormPropertySerializable, Model)) {
#>
    public <#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: <#= formControlValueClassName #> = new <#= formControlValueClassName #>(null, true, []);
<#    
            } else {
#>
    public <#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: <#= formControlValueClassName #> = new <#= formControlValueClassName #>(null, true, [ <#= string.Join(",", GetValidators(modelViewUIFormPropertySerializable, Model, RegExps, validatorsClassName)) #> ]);
<#    
            }
        }
    } 
    // combo, typeahead, search Dialogs
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if (HasCombo(modelViewUIFormPropertySerializable, Model) && modelViewUIFormPropertySerializable.IsShownInView) { 
#>
    public <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>: <#= formControlValueClassName #> = new <#= formControlValueClassName #>(null, true, []);
    public <#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> : <#= string.Join(" | ", CollectComboListInterfaces(Context, modelViewUIFormPropertySerializable, Model)) #> | null = null;
<#
        } 
        if (HasButton(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
    public <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>: <#= string.Join(" | ", CollectButtonItemInterfaces(Context, modelViewUIFormPropertySerializable, Model)) #> | null = null;
    public <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>: boolean = true;

<#
        } 
        if (HasTypeahead(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
    public <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>: <#= formControlValueClassName #>  = new <#= formControlValueClassName #>(null, true, []);
    public <#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> : <#= string.Join(" | ", CollectTypeaheadListInterfaces(Context, modelViewUIFormPropertySerializable, Model)) #>|null=null;
<#
        } 
    } 
#>

    constructor(props: <#= eformPropsDataModelClassName #>) {
        super(props);
        let locValidators: Array<<#= validatorFnClassName #>> = []; 
        this.state = {
            isMounting: true,
            scrn: <#= currFlexScreenFunctionName #>(),
<#  // search Dialogs
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if (HasButton(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
            <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, OpenModalSufix) #>: false,
            <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, HiddenFilterModalSufix) #>: [],
<#
        }
    } 
#>
            <#= EformModePropName #>: <#= eformModeEnumName #>.<#= GetInputTypeToEnumName(3) #>,
            <#= HiddenFilterPropName #>:[],
            <#= FormControlModelPropName #>: null,
<#  // objects for Scalar values
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if (IsBooleanInput(modelViewUIFormPropertySerializable, Model)) {
#>
            <#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: {Value: false, Disabled: true, Invalid: false, Errors: {}},
<#
        } else if (IsDateTimeInput(modelViewUIFormPropertySerializable, Model)) {
#>
            <#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: {Value: null, Disabled: true, Invalid: false, Errors: {}},
<#
        } else {
#>
            <#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: {Value: '', Disabled: true, Invalid: false, Errors: {}},
<#
        }
    } 
    
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        // combo controls for Object values
        if (HasCombo(modelViewUIFormPropertySerializable, Model) && modelViewUIFormPropertySerializable.IsShownInView) { 
#>
            <#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>: null,
            <#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> : null,
<#
        } 
        // searcch dialogs for Object values
        if (HasButton(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
            <#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>: null,
            <#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>: true,
<#
        } 
        // Typeahead for Object values
        if (HasTypeahead(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
            <#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>: null,
            <#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> : null,
<#
        } 
    } 
#>
        }
        this.<#= OnContMenuItemMethodName #> = this.<#= OnContMenuItemMethodName #>.bind(this);
        this.handleResize = this.handleResize.bind(this);
        this.getErrorMessage = this.getErrorMessage.bind(this);
        this.doInit = this.doInit.bind(this);
        this.checkValid = this.checkValid.bind(this);
        this.scalarsToState = this.scalarsToState.bind(this);
        this.nonScalarsToState = this.nonScalarsToState.bind(this);
        this.valsToState = this.valsToState.bind(this);
        this.toState = this.toState.bind(this);
        this.controlsToModel = this.controlsToModel.bind(this);
        this.doSubmit = this.doSubmit.bind(this);
        this.eformModeChanged = this.eformModeChanged.bind(this);
        this.inputToControls = this.inputToControls.bind(this);
        this.doClearControls = this.doClearControls.bind(this);
        this.ValForInput = this.ValForInput.bind(this);
<# //////////////////////////// start OnInit...()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasInitMethod(modelViewUIFormPropertySerializable, Model)) {
#>
        this.<#= GetExpressionForOnInitMethod(modelViewUIFormPropertySerializable, Model) #> = this.<#= GetExpressionForOnInitMethod(modelViewUIFormPropertySerializable, Model) #>.bind(this);
<#  
                }
            }
        }
#>

<#  //////////////////////////// start OnUpdate...ComboList()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasCombo(modelViewUIFormPropertySerializable, Model)) {
#>
        this.<#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = this.<#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.bind(this);
<#  
                }
            }
        }
#>

<#  //////////////////////////// start OnFilter...Typeahead()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasTypeahead(modelViewUIFormPropertySerializable, Model)) {
#>
        this.<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = this.<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.bind(this);
<#  
                }
            }
        }
#>

<#  //////////////////////////// start OnValChange...()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if (HasInitMethod(modelViewUIFormPropertySerializable, Model) && HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
        this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #> = this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>.bind(this);
<#  
                    }
            }
        }
#>

<# //////////////////////////// start SearchButtonClick()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (HasButton(modelViewUIFormPropertySerializable, Model) &&  modelViewUIFormPropertySerializable.IsShownInView) {
#>
        this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #> = this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>.bind(this);
        this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchCloseSufix) #> = this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchCloseSufix) #>.bind(this);
<#  
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) &&  modelViewUIFormPropertySerializable.IsShownInView) {
#>
        this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadAddDisplaySufix) #> = this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadAddDisplaySufix) #>.bind(this);
<#  
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) &&  modelViewUIFormPropertySerializable.IsShownInView) {
#>
        this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadUpdDisplaySufix) #> = this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadUpdDisplaySufix) #>.bind(this);
<#
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) &&  modelViewUIFormPropertySerializable.IsShownInView) {
#>
        this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadDelDisplaySufix) #> = this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadDelDisplaySufix) #>.bind(this);
<#
            }
        }
#>


<#
    {
        for(int i = 0; i < Model.UIFormProperties.Count; i++) {
            bool checkBoxNotAdded = true;
            bool comboNotAdded = true;
            bool typeaheadNotAdded = true;
            bool noSufixNotAdded = true;
            ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable = Model.UIFormProperties[i];
            if (modelViewUIFormPropertySerializable.IsShownInView) {
                InputTypeEnum InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenAdd;
                if (InputTypeWhenXXX != InputTypeEnum.Hidden) {
                    if ((InputTypeWhenXXX == InputTypeEnum.Combo) && comboNotAdded) {
#>
        this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.bind(this);
<#
                        comboNotAdded = false;
                    } else if ((InputTypeWhenXXX == InputTypeEnum.Typeahead) && typeaheadNotAdded) {
#>
        this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.bind(this);
        this.<#= GetExpressionForBaseOnInputMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = debounce(this.<#= GetExpressionForBaseOnInputMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>, 1000).bind(this);
        this.<#= GetExpressionForBaseOnOpenMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = this.<#= GetExpressionForBaseOnOpenMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.bind(this);
<#
                        typeaheadNotAdded = false;
                    } else if(IsBooleanInput(modelViewUIFormPropertySerializable, Model) &&  checkBoxNotAdded) {
#>
        this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, CheckBoxSufix) #> = this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, CheckBoxSufix) #>.bind(this);
<#
                        checkBoxNotAdded = false;
                    } else if(noSufixNotAdded) {
                        if (!((InputTypeWhenXXX == InputTypeEnum.ReadOnly) || HasButton(InputTypeWhenXXX))) {
#>
        this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, NoSufix) #> = this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, NoSufix) #>.bind(this);
<#
                            noSufixNotAdded = false;
                        }
                    }
                }

                
            }
        }
    }
#>
    }
    static getDerivedStateFromProps(nwprps: <#= eformPropsDataModelClassName #>, oldstt: <#= eformStateDataModelClassName #>): any {

        let ceformMode: <#= eformModeEnumName #> = <#= eformModeEnumName #>.<#= GetInputTypeToEnumName(3) #>;
        if (nwprps.<#= EformModePropName #>) ceformMode = nwprps.<#= EformModePropName #>;

        let chiddenFilter: Array<<#= webServiceFilterRsltDataModelClassName #>> = [];
        if(nwprps.<#= HiddenFilterPropName #>) chiddenFilter = nwprps.<#= HiddenFilterPropName #>;
        
        let ceformControlModel: <#= GetInterfaceName(Model) #> | null = null;
        if(nwprps.<#= FormControlModelPropName #>) ceformControlModel = nwprps.<#= FormControlModelPropName #>;

        let rslt: { [key: string]: any; } = {};
        if(oldstt.isMounting) {
            rslt['isMounting'] = false;
            rslt['<#= EformModePropName #>'] = ceformMode;
            rslt['<#= HiddenFilterPropName #>'] = chiddenFilter;
            rslt['<#= FormControlModelPropName #>'] = ceformControlModel;
            return rslt;
        }
        if(ceformMode !== oldstt.<#= EformModePropName #>) {
            rslt['<#= EformModePropName #>'] = ceformMode;
            rslt['<#= HiddenFilterPropName #>'] = chiddenFilter;
            rslt['<#= FormControlModelPropName #>'] = ceformControlModel;
            rslt['isMounting'] = true;
            return rslt;
        }
        let iseq: boolean = (ceformControlModel === null) && (oldstt.<#= FormControlModelPropName #> === null);
        iseq = iseq ? iseq : ceformControlModel === oldstt.<#= FormControlModelPropName #>;
        if (!iseq) {
            rslt['<#= EformModePropName #>'] = ceformMode;
            rslt['<#= HiddenFilterPropName #>'] = chiddenFilter;
            rslt['<#= FormControlModelPropName #>'] = ceformControlModel;
            rslt['isMounting'] = true;
            return rslt;
        }
        iseq = (chiddenFilter === oldstt.<#= HiddenFilterPropName #>);
        iseq = iseq ? iseq : ( (chiddenFilter.length === 0) && (chiddenFilter.length === 0) );
        if (!iseq) {
            rslt['<#= EformModePropName #>'] = ceformMode;
            rslt['<#= HiddenFilterPropName #>'] = chiddenFilter;
            rslt['<#= FormControlModelPropName #>'] = ceformControlModel;
            rslt['isMounting'] = true;
            return rslt;
        }
        return null;
    }
    getErrorMessage(fc: <#= formControlStateClassName #>): string {
        if(fc)
            return <#= formControlValueClassName #>.getValidationErrorMessageEx(fc.Errors);
        else 
            return 'Validation Error.';
    } 
    handleResize = () => {
        const cfs: string = <#= currFlexScreenFunctionName #>();
        if(this.state.scrn !== cfs) {
          this.setState<'scrn'>( { scrn: cfs } );
        }
    }
    async componentDidMount() {
        window.addEventListener('resize', this.handleResize);
        this.<#= EformModePropName #> = this.state.<#= EformModePropName #>;
        this.eformModeChanged();
        this.inputToControls();
        this.doClearControls();
        await this.doInit();
        this.toState();
    }
    componentWillUnmount() {
        window.removeEventListener('resize', this.handleResize);
    }
    <#= OnContMenuItemMethodName #>(cmi: <#= webServiceFilterMenuDataModelClassName #>) {
        if(this.props.<#= OnContMenuItemMethodName #>) {
            this.props.<#= OnContMenuItemMethodName #>( {id: cmi.id, sender: this, value: null} );
        }
    }

    public scalarsToState(): void {
        this.setState({
<#  
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
            <#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: { Errors: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Errors, Invalid: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.InvalidEx, Disabled: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled, Value: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value }, 
<#
    } 
#>
        });
    }

    public nonScalarsToState(): void {
<#
    for(int inptTp = 1; inptTp < 4; inptTp++) {
        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
        if (inptTp ==1) {
#>
        if ((this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        if ((this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        if (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
        bool setStateInserted = false;
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                    if (!setStateInserted) {
                        setStateInserted = true;
#>
            this.setState({
<#    
                    }
#>
                <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>: { Value: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value, Disabled: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Disabled, Invalid: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.InvalidEx, Errors: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Errors },
<#    
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                    if (!setStateInserted) {
                        setStateInserted = true;
#>
            this.setState({
<#    
                    }
#>
                <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>: { Value: this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value, Disabled: this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Disabled, Invalid: this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.InvalidEx, Errors: this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Errors },
<#   
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } //foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if (setStateInserted) {
#>
            });
<#    
        }

#>
        } 
<#
    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }

    public valsToState(): void {
<#
    {
        for(int inptTp = 1; inptTp < 4; inptTp++) {
            if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
            if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
            if (inptTp ==1) {
#>
        if ((this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
            } else if (inptTp == 2) {
#>
        else if ((this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
            } else {
#>
        else if (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
            }
            bool setStateInserted = false;
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                if (modelViewUIFormPropertySerializable.IsShownInView) { 
                    if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                    if (!setStateInserted) {
                        setStateInserted = true;
#>
            this.setState({
<#    
                    }
#>
                <#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>: this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>,
<#    
                    } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                    else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                    if (!setStateInserted) {
                        setStateInserted = true;
#>
            this.setState({
<#    
                    }
#>
                <#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>: this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> ,
<#    
                    } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                    else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                    if (!setStateInserted) {
                        setStateInserted = true;
#>
            this.setState({
<#    
                    }
#>
                <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>,
                <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>,
<#    
                    } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
            } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if (setStateInserted) {
#>
            });
<#    
        }

#>
        } 
<#    
        } // for(int inptTp = 1; inptTp < 4; inptTp++) {
    }
#>
   }

    toState() {
        this.valsToState(); // this method must be first 
        this.scalarsToState();
        this.nonScalarsToState();
    }

    public eformModeChanged(): void {
<#
    for(int inptTp = 1; inptTp < 4; inptTp++) {
        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
        if (inptTp ==1) {
#>
        if ((this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        if ((this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        if (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Default) {
// scalar value controls
                    if (string.IsNullOrEmpty(modelViewUIFormPropertySerializable.ForeignKeyNameChain)) {
#>
            this.<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled = false; 
<#    
                    } else {
#>
            this.<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled = true; 
<#    
                    }
                } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Default) {
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.ReadOnly) {
#>
            this.<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled = true; 
<#    
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.ReadOnly) {
// object value controls of Combo type
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            this.<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled = false; 
            this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = new <#= formControlValueClassName #>(null, true);
<#    
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
// object value controls of Typeahead type
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            this.<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled = false; 
            this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = new <#= formControlValueClassName #>(null, true);
<#   
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
// object value controls of SearchDialog type
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            this.<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled = false; 
<#    
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                else { // GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) === Hidden
#>
            this.<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled = false; 
<#    
                } // GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) === Hidden
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } //foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
        } 
<#
    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }

<# //////////////////////////// start doClearControls()-generator 
#>
    public doClearControls(): void {
<#
    {
        for(int inptTp = 1; inptTp < 4; inptTp++) {
            if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
            if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
            if (inptTp ==1) {
#>
        if ((this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
            } else if (inptTp == 2) {
#>
        else if ((this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
            } else {
#>
        else if (this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
            }
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                if (modelViewUIFormPropertySerializable.IsShownInView) { 
                    if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Disabled = true; 
            this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.ResetVal(null);
            this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = [];
<#    
                    } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                    else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.ResetVal(null);
            this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = [];
<#    
                    } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                    else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = null;
            this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #> = true;
<#    
                    } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
            } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
        } 
<#    
        } // for(int inptTp = 1; inptTp < 4; inptTp++) {
    }
#>
   }
<# //////////////////////////// end doClearControls()-generator
#>

<# //////////////////////////// start inputToControls()-generator 
#>
    public inputToControls(): void {
        let hf: <#= webServiceFilterRsltDataModelClassName #> | any;
        let val: any = null;
        if(this.state.<#= FormControlModelPropName #>) {
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
            hf = this.state.<#= HiddenFilterPropName #>.find(v => { return v.fltrName === '<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>' });
            if (hf) { val = hf.fltrValue; } else { val = this.state.<#= FormControlModelPropName #>.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>; }
            this.<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.ResetVal(val);
<#
    }
#>
        } else {
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
            hf = this.state.<#= HiddenFilterPropName #>.find(v => { return v.fltrName === '<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>' });
            if (hf) { val = hf.fltrValue; } else { val = null; }
            this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.ResetVal(val);
<#
    }
#>
        }
    }
<# //////////////////////////// end inputToControls()-generator 
#>

    async componentDidUpdate() {
        if ( this.state.isMounting ) {
            this.setState({ isMounting: false });
            if(this.state.<#= EformModePropName #> !== this.<#= EformModePropName #>) {
                this.<#= EformModePropName #> = this.state.<#= EformModePropName #>;
                this.eformModeChanged();
            }
            this.inputToControls();
            this.doClearControls();
            await this.doInit();
            this.toState();
        }
    }


//
// TODO: check if doInit()-method is required
//
    async doInit() {
<#  //////////////////////////// start OnInit()-generator
    {
        bool genElse = false;
        for(int inptTp = 1; inptTp < 4; inptTp++) {
            if (HasModelInitMethodForInputMode(Model, inptTp)) {
            if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
            if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
            if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
            } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
            } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
            }
                bool isPromiseAllSet = false;
                foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                    if (modelViewUIFormPropertySerializable.IsShownInView) { 
                        if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, inptTp)) {
                            if ( GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp).Count < 1) {
                                if(!isPromiseAllSet) {
                                    isPromiseAllSet=true;
#>
             await Promise.all([
<#
                                }
#>
                this.<#= GetExpressionForOnInitMethod(modelViewUIFormPropertySerializable, Model) #>(),
<#    
                            }
                        } // if(HasInitMethod(modelViewUIFormPropertySerializable, Model)) {
                    } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
                } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                if(isPromiseAllSet) {
#>
             ]);
<#
                }
#>
        }
<#    
            }
        } // for(int inptTp = 1; inptTp < 4; inptTp++) {
    }
#>
    } // doInit() 

<#  //////////////////////////// start OnInit...()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasInitMethod(modelViewUIFormPropertySerializable, Model)) {
#>
    async <#= GetExpressionForOnInitMethod(modelViewUIFormPropertySerializable, Model) #>() {
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

                        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
                        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
//
// GetViewNameForControlList()
// ForeignKeys-chain defines the View for which we generate current method
// not direct MasterView (!!!) but the View that has current ForeignKeys-chain
// 
// So.
// 1.
// GetViewNameForControlList() returns the ViewName which can be or can not be equal to Model.ViewName;
// 2.
// GetPrimaryKeyProps() returns PrimaryKey Properties of the ViewName, not Model.ViewName
//
// 3.
// GetDirectMasters() returns direct masters for the current ViewName, not Model.ViewName
// we need them to call OnInit...() after defining current ViewName
// GetDirectMasters() returns only those masters which have combo/typeahead/searchBox control in the Model
//
// 4.
// GetDirectDetails() returns direct details for the ViewName not Model.ViewName
// GetDirectDetails() returns only those Details which have combo/typeahead/searchBox control in the Model
// 


                        string viewName =  GetViewNameForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        string servisPropNm  = formServicePrefix + viewName;
                        List<ModelViewPropertyOfVwSerializable> primKeyProps = GetPrimaryKeyProps(Context, viewName);
                        if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, inptTp)) {
                            List<ModelViewUIFormPropertySerializable> directMasters = 
                             GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
                            if (primKeyProps.Count > 0) {
                                foreach(ModelViewPropertyOfVwSerializable pkpModelViewPropertyOfVwSerializable in primKeyProps) {
#>
            let <#= GetPrimKeyVarName(pkpModelViewPropertyOfVwSerializable) #>: any = null;
<#  
                                }
                            } else {
#>
// error: could not find primary key for the given view: <#= viewName #> which was detected by the property: <#= modelViewUIFormPropertySerializable.ViewPropertyName #>
<#  
                            }
                            if ( MustHaveDirectDetails(modelViewUIFormPropertySerializable, Model, Context) ) {
                                List<ModelViewUIFormPropertySerializable> details = 
                                    GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                                foreach(ModelViewUIFormPropertySerializable dtlModelViewUIFormPropertySerializable in details) {
                                    ModelViewSerializable detailView = GetViewForControlList(dtlModelViewUIFormPropertySerializable, Model, Context, inptTp);
                                    List<ModelViewPropertyOfVwSerializable> foreignKeyProps = GetForeignKeyProps(Context, Model, modelViewUIFormPropertySerializable, dtlModelViewUIFormPropertySerializable, inptTp);
                                    if(foreignKeyProps.Count != primKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #>
//    method[GetForeignKeyProps]                     foreignKey Props Count = [<#= foreignKeyProps.Count #>] and prim Key Props Count = [<#= primKeyProps.Count #>] 
<#  
                                }
                                    for(int loci = 0; loci < primKeyProps.Count; loci++) {
                                        if(foreignKeyProps.Count > loci) {
                                            ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable = primKeyProps[loci];
                                            ModelViewPropertyOfVwSerializable frgnKpModelViewPropertyOfVwSerializable = foreignKeyProps[loci];
                                            if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            if(this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>) {
                if(this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value) {
                    if(!(typeof this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value.<#= GetTypeScriptPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView)#>  === 'undefined')) {
                        <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value.<#= GetTypeScriptPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView)#>;
                    }
                }
            }
<#
                                            } else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            if(this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>) {
                if(this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value) {
                    if(!(typeof this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value.<#= GetTypeScriptPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView)#>  === 'undefined')) {
                        <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value.<#= GetTypeScriptPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView)#>;
                    }
                }
            }
<#
                                            }  else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            if(this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #>) {
                if(!(typeof this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #>.<#= GetTypeScriptPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView)#>  === 'undefined')) {
                    <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #>.<#= GetTypeScriptPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView)#>;
                }
            }
<#                                    
                                            }                                                   
                                        }
                                    } // for(int loci = 0; loci < primKeyProps.Count; loci++)
                                } // foreach(ModelViewUIFormPropertySerializable dtlModelViewUIFormPropertySerializable in details)
#>
            let isPkNtDf: boolean = <# {int i = 0;
                            foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #> || <# } 
                                    #> (typeof <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> === 'undefined') <#
                                    i++;
                                }} #>  ;
            isPkNtDf = isPkNtDf ? isPkNtDf : <# {int i = 0;
                            foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #> || <# } 
                                    #> (<#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> === null) <#
                                    i++;
                                }} #>  ;
            if (isPkNtDf) { 
<#
                            if(directMasters.Count < 1) {
#>
                await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                await this.<#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }
                            } else {
                                bool isPromiseAllSet = false;
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
                                    if(!isPromiseAllSet) {
                                        isPromiseAllSet=true;
#>
                await Promise.all([
<#
                                    }
#>
                    this.<#=  GetExpressionForOnInitMethod(directMaster, Model) #>(),
<#
                                }
                                    if(isPromiseAllSet) {
#>
                ]);
<#
                                    }
                            }
#>
            } else {
                await <#= GetJavaScriptServiceNameForViewName(viewName) #>.<#= GetOneMethodName #>(this.context <# 
                            foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { #>, <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #><#
                                } #> )
                .then((res: any) => res.json())
                .then(
                    async (data: <#= GetInterfaceNameEx(Context, viewName) #> ) => { // success path
                        if (!(typeof data === 'undefined')) {
                            if (!(data === null)) {
<#
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                                this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value = data;
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                                this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value = data;
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                                this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = data;
<#
                            }
#>
                            }
                        }
<#
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await Promise.all([
                            this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value, false),
                            this.<#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>()
                        ]);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value, false);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>, false);
<#
                                }
                            } else {
                                bool isPromiseAllSet=false;
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
                                    if(!isPromiseAllSet) {
                                        isPromiseAllSet=true;
#>
                        await Promise.all([
<#
                                    }

#>
                            this.<#= GetExpressionForOnInitMethod(directMaster, Model) #>(),
<#
                                }
                                    if(isPromiseAllSet) {
#>
                        ]);
<#
                                    }
                            }
#>
                    },
                    async (error: any) => { // error path
<#
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await Promise.all([
                            this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true),
                            this.<#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>()
                        ]);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }
                            } else {
                                bool isPromiseAllSet = false;
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
                                    if(!isPromiseAllSet) {
                                        isPromiseAllSet=true;
#>
                        await Promise.all([
<#
                                    }
#>
                            this.<#= GetExpressionForOnInitMethod(directMaster, Model) #>(),
<#
                                    if(isPromiseAllSet) {
#>
                        ]);
<#
                                    }
                                }
                            }
#>
                        this.context.<#= ShowErrorMethodName #>('http', error)
                    } 
                ); // end of .subscribe
            }
<#
                            } else { // if ( MustHaveDirectDetails(modelViewUIFormPropertySerializable, Model, Context) )
                                List<ModelViewPropertyOfVwSerializable> foreignKeyProps = GetForeignKeyPropsBase(Context, Model, modelViewUIFormPropertySerializable);
                                if(foreignKeyProps.Count != primKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #>
//   method [GetForeignKeyPropsBase]                      foreignKey Props Count = [<#= foreignKeyProps.Count #>] and prim Key Props Count = [<#= primKeyProps.Count #>] 
<#  
                                }
                                for(int loci = 0; loci < primKeyProps.Count; loci++) {
                                    if(foreignKeyProps.Count > loci) {
                                        ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable = primKeyProps[loci];
                                        ModelViewPropertyOfVwSerializable frgnKpModelViewPropertyOfVwSerializable = foreignKeyProps[loci];
#>
            if(!(typeof this.<#= GetTypeScriptPropertyName(frgnKpModelViewPropertyOfVwSerializable, Model) #>.Value === 'undefined')) {
                if(!(this.<#= GetTypeScriptPropertyName(frgnKpModelViewPropertyOfVwSerializable, Model) #>.Value === null)) {
                    <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = this.<#= GetTypeScriptPropertyName(frgnKpModelViewPropertyOfVwSerializable, Model) #>.Value;
                }
            }
<#
                                    }
                                } // for(int loci = 0; loci < primKeyProps.Count; loci++)
#>
            let isPkNtDf: boolean = <# {int i = 0;
                            foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #> || <# } 
                                    #> (typeof <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> === 'undefined') <#
                                    i++;
                                }} #>  ;
            isPkNtDf = isPkNtDf ? isPkNtDf : <# {int i = 0;
                            foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #> || <# } 
                                    #> (<#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> === null) <#
                                    i++;
                                }} #>  ;
            if (isPkNtDf) { 
<#
                            if(directMasters.Count < 1) {
#>
                await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                await this.<#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }
                            } else {
                                bool isPromiseAllSet=false;
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
                                    if(!isPromiseAllSet) {
                                        isPromiseAllSet=true;
#>
                await Promise.all([
<#
                                    }
#>
                    this.<#=  GetExpressionForOnInitMethod(directMaster, Model) #>(),
<#
                                }
                                    if(isPromiseAllSet) {
#>
                ]);
<#
                                    }
                            }
#>
            } else {
                await <#= GetJavaScriptServiceNameForViewName(viewName) #>.<#= GetOneMethodName #>(this.context <# 
                            foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { #>, <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #><#
                                } #> )
                .then((res: any) => res.json())
                .then(
                    async (data: <#= GetInterfaceNameEx(Context, viewName) #> ) => { // success path
                        if (!(typeof data === 'undefined')) {
                            if (!(data === null)) {
<#
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                                this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value = data; 
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                                this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value = data;
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                                this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = data;
<#
                            }
#>
                            }
                        }
<#
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await Promise.all([
                            this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value, false),
                            this.<#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>()
                        ]);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value, false);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>, false);
<#
                                }
                            } else {
                                bool isPromiseAllSet=false;
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
                                    if(!isPromiseAllSet) {
                                        isPromiseAllSet=true;
#>
                        await Promise.all([
<#
                                    }
#>
                            this.<#= GetExpressionForOnInitMethod(directMaster, Model) #>(),
<#
                                }
                                if(isPromiseAllSet) {
#>
                        ]);
<#
                                }
                            }
#>
                    },
                    async (error: any) => { // error path
<#
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await Promise.all([
                            this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true),
                            this.<#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>()
                        ]);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                        await this.<#= GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                        this.context.<#= ShowErrorMethodName #>('http', error)
                    } 
                ); // end of .subscribe
            }
<#  
                        } // if ( MustHaveDirectDetails(modelViewUIFormPropertySerializable, Model, Context) ) {...} else {
#>
        }
<#  
                        } // if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, 1)) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }
<#    
                } // if(HasInitMethod(modelViewUIFormPropertySerializable, Model))
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end OnInit...()-generator
#>

<#  //////////////////////////// start OnUpdate...ComboList()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasCombo(modelViewUIFormPropertySerializable, Model)) {
#>
    async <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>() {
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

                        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
                        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                        if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                            ModelViewSerializable locView = 
                                GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
            
                            string viewName = ""; 
                            if (locView != null) {
                                viewName = locView.ViewName;
                            }
                            string servisPropNm  = formServicePrefix + viewName;
                            List<ModelViewUIFormPropertySerializable> directMasters = 
                                GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);


        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.state.<#= EformModePropName #> === <#= eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.state.<#= EformModePropName #> === <#= eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#= EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.state.<#=  EformModePropName #> === <#= eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
                            if (directMasters.Count < 1) {
#>
            let flt: <#=  GetInterfaceFilterName(locView) #> = {};
            <#= GetOrderBy(modelViewUIFormPropertySerializable, Model, Context, inptTp,"flt") #>
            await <#= GetJavaScriptServiceName(locView) #>.<#= GetWithFilterMethodName #>(this.context, flt)
                .then( (res: any) => res.json())
                .then( async (data: <#= GetInterfacePageNameEx(Context, viewName) #> ) => { // success path
                    this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = [];
                    if (!(typeof data === 'undefined')) {
                        if (!(data === null)) {
                            if (!(typeof data.items === 'undefined')) {
                                if (Array.isArray(data.items)) {
                                    this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = data.items;
                                    let lfc: any = this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value;
                                    if (!(typeof lfc === 'undefined')) {
                                        if (!(lfc === null)) {
                                            let ind: number = this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.findIndex(e => {
                                                        return  <#= GetPrimKeyFilterForFindIndexMethod(Context, viewName, "e","lfc") #> ;
                                                });                            
                                            if (ind > -1) {
                                                this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.splice(ind,1,lfc);
                                            } else {
                                                await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if(this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.length < 1) {
                        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                    }
                }, 
                async (error: any) => { // error path
                    this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = [];
                    this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                    this.context.<#= ShowErrorMethodName #>('http', error)
                } 
            );
<#
                            } else {
                                List<ModelViewPropertyOfVwSerializable> allForeignKeyProps = GetAllForeignKeyProps(locView);
#>
            let hasNoVal: boolean = false;
            // if(this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>) {
                hasNoVal = typeof this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value === 'undefined';
                hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value === null);
            // } else { hasNoVal = true; }
            let flt: <#= GetInterfaceFilterName(locView) #> | null = null;
            if (! hasNoVal) {
                let lfc: <#= GetInterfaceNameEx(Context, viewName) #> = this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value;
<#
                            foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                string masterViewName = "";
                                if(masterView != null) {
                                    masterViewName = masterView.ViewName;
                                }
                                List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                }
#>
                hasNoVal = hasNoVal ? hasNoVal : <#
                                {
                                    bool setOr = false;
                                    for(int i = 0; i < detailForeignKeyProps.Count; i++) {
                                        if(setOr) {
#> || (typeof lfc.<#= GetTypeScriptPropertyName(detailForeignKeyProps[i], locView) #> === 'undefined')<# if((i+1) == detailForeignKeyProps.Count) {#>); <#} #>
<#
                                        } else {
#> ((typeof lfc.<#= GetTypeScriptPropertyName(detailForeignKeyProps[i], locView) #> === 'undefined')<# if((i+1) == detailForeignKeyProps.Count) {#>); <#} #>
<#
                                            setOr = true;
                                        }
                                    }
                                }
#>

                hasNoVal = hasNoVal ? hasNoVal : <#
                                {
                                    bool setOr = false;
                                    for(int i = 0; i < detailForeignKeyProps.Count; i++) {
                                        if(setOr) {
#> || (lfc.<#= GetTypeScriptPropertyName(detailForeignKeyProps[i], locView) #> === null)<# if((i+1) == detailForeignKeyProps.Count) {#>); <#} #>
<#
                                        } else {
#> ((lfc.<#= GetTypeScriptPropertyName(detailForeignKeyProps[i], locView) #> === null)<# if((i+1) == detailForeignKeyProps.Count) {#>); <#} #>
<#
                                            setOr = true;
                                        }
                                    }
                                }
                            }
#>                              
                if(!hasNoVal) {
                    flt={};
<#
                            foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                string masterViewName = "";
                                if(masterView != null) {
                                    masterViewName = masterView.ViewName;
                                }
                                List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                }
                                for(int i = 0; i < detailForeignKeyProps.Count; i++) {
#>
                    flt.<#= GetTypeScriptPropertyName(detailForeignKeyProps[i], locView) #> = [lfc.<#= GetTypeScriptPropertyName(detailForeignKeyProps[i], locView) #>];
<#
                                }
                            }
#>
                }
            }
            if (hasNoVal) {
                hasNoVal = false;

<#
                              foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value === 'undefined');
                hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value === null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value === 'undefined');
                hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value === null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> === 'undefined');
                hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> === null);
<#
                                    }
#>          
                if (! hasNoVal) {
<#
                                    foreach(ModelViewPropertyOfVwSerializable masterProp in masterPrimKeyProps) {
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                    // @ts-ignore
                    hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === 'undefined');
                    // @ts-ignore
                    hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                    // @ts-ignore
                    hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === 'undefined');
                    // @ts-ignore
                    hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                    // @ts-ignore
                    hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #>.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === 'undefined');
                    // @ts-ignore
                    hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #>.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === null);
<#
                                        }
                                    }
#>
                }
<#
                              }

#>
                if (!hasNoVal) {
                    flt = {};
<#
                            foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                string masterViewName = "";
                                if(masterView != null) {
                                    masterViewName = masterView.ViewName;
                                }
                                List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                }
                                for(int loci = 0; loci < detailForeignKeyProps.Count; loci++) {
                                    if(loci < masterPrimKeyProps.Count) {
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                    // @ts-ignore
                    flt.<#= GetTypeScriptPropertyName(detailForeignKeyProps[loci], locView) #> = [this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value.<#= GetTypeScriptPropertyName(masterPrimKeyProps[loci], masterView) #>];
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                    // @ts-ignore
                    flt.<#= GetTypeScriptPropertyName(detailForeignKeyProps[loci], locView) #> = [this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value.<#= GetTypeScriptPropertyName(masterPrimKeyProps[loci], masterView) #>];
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                    // @ts-ignore
                    flt.<#= GetTypeScriptPropertyName(detailForeignKeyProps[loci], locView) #> = [this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #>.<#= GetTypeScriptPropertyName(masterPrimKeyProps[loci], masterView) #>];
<#
                                        }
                                    }
                                }
                            }
#>
                }
            }
            if (!hasNoVal) {
                    // @ts-ignore
                    <#= GetOrderBy(modelViewUIFormPropertySerializable, Model, Context, inptTp,"flt") #>
                    await <#= GetJavaScriptServiceName(locView) #>.<#= GetWithFilterMethodName #>(this.context, flt)
                    .then((res: any) => res.json())
                    .then(async (data: <#= GetInterfacePageNameEx(Context, viewName) #> ) => { // success path
                            this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = [];
                            if (!(typeof data === 'undefined')) {
                                if (!(data === null)) {
                                    if (!(typeof data.items === 'undefined')) {
                                        if (Array.isArray(data.items)) {
                                            this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = data.items;
                                            let lfc: any = this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.value;
                                            if (!(typeof lfc === 'undefined')) {
                                                if (!(lfc === null)) {
                                                    let ind: number = this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.findIndex(e => {
                                                                return  <#= GetPrimKeyFilterForFindIndexMethod(Context, viewName, "e","lfc") #> ;
                                                        });                            
                                                    if (ind > -1) {
                                                        this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.splice(ind,1,lfc);
                                                    } else {
                                                        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if(this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.length < 1) {
                                this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                            }
                        }, 
                        async (error: any) => { // error path
                            this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = [];
                            await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                            this.context.<#= ShowErrorMethodName #>('http', error)
                        } 
                    );
            } else {
                this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = [];
                await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
            }
<#
                        } 
#>
        }
<#  
                        } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }
<#  
                } // if(HasCombo(modelViewUIFormPropertySerializable, Model)) {
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end  OnUpdate...ComboList()-generator
#>

<#  //////////////////////////// start OnFilter...Typeahead()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasTypeahead(modelViewUIFormPropertySerializable, Model)) {
#>
    async <#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>(inFilter?: string|null) {
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                        if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                            ModelViewSerializable locView = GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                            if(locView == null) {
#>
//
// error: Could not find model for for the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> with a method GetViewForControlList
// 
<#  
                            }
                            string viewName = ""; 
                            if (locView != null) {
                                viewName = locView.ViewName;
                            }
                            string servisPropNm  = formServicePrefix + viewName;
                            List<ModelViewUIFormPropertySerializable> directMasters = 
                                GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
#>
            let hasNoVal: boolean = false;
            let flt: <#= GetInterfaceFilterName(locView) #> = {};
<#
                            if (directMasters.Count > 0) {
                                List<ModelViewPropertyOfVwSerializable> allForeignKeyProps = GetAllForeignKeyProps(locView);
                              foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value === 'undefined');
            hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value === null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value === 'undefined');
            hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value === null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> === 'undefined');
            hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> === null);
<#
                                    }
#>                    
            if (! hasNoVal) {
<#
                                    foreach(ModelViewPropertyOfVwSerializable masterProp in masterPrimKeyProps) {
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                // @ts-ignore
                hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === 'undefined');
                // @ts-ignore
                hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                // @ts-ignore
                hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === 'undefined');
                // @ts-ignore
                hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                // @ts-ignore
                hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #>.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === 'undefined');
                // @ts-ignore
                hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #>.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === null);
<#
                                        }
                                    }
#>
            }
<#
                              } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
#>
            if (hasNoVal) {
                this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = [];
                this.setState({ <#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>: [] });
                return;
            }
<#
                                foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                    if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                    }
                                    for(int loci = 0; loci < detailForeignKeyProps.Count; loci++) {
                                        if(loci < masterPrimKeyProps.Count) {
                                            if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            flt.<#= GetTypeScriptPropertyName(detailForeignKeyProps[loci], locView) #> = [this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value.<#= GetTypeScriptPropertyName(masterPrimKeyProps[loci], masterView) #>];
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            flt.<#= GetTypeScriptPropertyName(detailForeignKeyProps[loci], locView) #> = [this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value.<#= GetTypeScriptPropertyName(masterPrimKeyProps[loci], masterView) #>];
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            flt.<#= GetTypeScriptPropertyName(detailForeignKeyProps[loci], locView) #> = [this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #>.<#= GetTypeScriptPropertyName(masterPrimKeyProps[loci], masterView) #>];
<#
                                            }
                                        }
                                    }
                                } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                            } //  if (directMasters.Count > 0) {
#>
            if(!(typeof inFilter === 'undefined')) {
                if(!(inFilter === null)) {
                    if (!(inFilter === '')) {
<#                          
                            {
                                // modelViewUIFormPropertySerializable, Model, locView
                            ModelViewPropertyOfVwSerializable masterProp = GetTypeAheadMasterPropEx(Model, modelViewUIFormPropertySerializable, locView);
                            if(masterProp == null) {
#>
//
//error: could not find master property for the given detail property: <#= modelViewUIFormPropertySerializable.ViewPropertyName #> <# if(locView != null) { #> and the view: <#= locView.ViewName #>  <# } #> 

//       with a method GetTypeAheadMasterPropEx
//
<#
                            }
                            if (directMasters.Count < 1) {
                                
#>
                        flt.<#= GetTypeScriptPropertyName(masterProp, locView) #> = [inFilter];
<#                          
                            } else {
#>
                        if (typeof flt.<#= GetTypeScriptPropertyName(masterProp, locView) #> === 'undefined') {
                            flt.<#= GetTypeScriptPropertyName(masterProp, locView) #> = [inFilter];
                        } else if (Array.isArray(flt.<#= GetTypeScriptPropertyName(masterProp, locView) #>)) {
                            flt.<#= GetTypeScriptPropertyName(masterProp, locView) #>.push(inFilter);
                        } else {
                            flt.<#= GetTypeScriptPropertyName(masterProp, locView) #> = [inFilter];
                        }
<#                          
                            }
                            }
#>
                    }
                }
            }
            <#= GetOrderBy(modelViewUIFormPropertySerializable, Model, Context, inptTp,"flt") #>
            await <#= GetJavaScriptServiceName(locView) #>.<#= GetWithFilterMethodName #>(this.context, flt)
            .then((res: any) => res.json())
            .then( async (v: <#= GetInterfacePageName(locView) #>) => {
                let isndef: boolean = true;
                if (!(typeof v.items === 'undefined')) {
                    if(!(v.items === null)) {
                        isndef = false;
                        this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = v.items;
                    }
                }
                if (isndef) {
                    this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = [];
                }
                this.setState({ <#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>: this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> });
             },
             async (error: any) => {
                this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = [];
                this.setState({ <#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>: [] });
                this.context.showError('http', error)
             });
        }
<#  
                        } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }
<#  
                } // if(HasTypeahead(modelViewUIFormPropertySerializable, Model)) {
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end OnFilter...Typeahead()-generator
#>


<#  //////////////////////////// start OnValChange...()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if (HasInitMethod(modelViewUIFormPropertySerializable, Model) && 
                    HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
    async <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(inVal: any, dscrdChld: boolean) {
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                        List<ModelViewUIFormPropertySerializable> directMasters = 
                                GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        ModelViewSerializable locView = 
                            GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        string viewName = ""; 
                        if(locView == null) {
#>
//
// error: Could not find model for for the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> with a method GetViewForControlList
// 
<#  
                        }
                        if (locView != null) {
                            viewName = locView.ViewName;
                        }
                        List<ModelViewPropertyOfVwSerializable> locViewPrimKeys = GetPrimaryKeyProps(Context, viewName);
                        string servisPropNm  = formServicePrefix + viewName;
                        
                        List<ModelViewUIFormPropertySerializable> details = 
                                    GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        List<ModelViewUIFormPropertySerializable> dependentScalarProps = 
                                    GetDependentScalarProps(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        if ((dependentScalarProps.Count > 0) || (details.Count > 0)) {

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }



                        if(dependentScalarProps.Count > 0) {
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {

#>

            if (typeof inVal === 'undefined') {
                inVal = null;
            }
            let hasNoVal: boolean = inVal === null;
            if(!hasNoVal) {
                hasNoVal = typeof inVal === 'string'; 
            }
            if (hasNoVal) { 
                dscrdChld = true; 
            }
<#
                            } else {
#>
            let hasNoVal: boolean = typeof inVal === 'undefined';
            hasNoVal = hasNoVal ? hasNoVal : (inVal === null);
            if (hasNoVal) { 
                dscrdChld = true; 
            }
<#
                            }
                        if(directMasters.Count < 1) {
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Disabled = false;
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Disabled = false;
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #> = false;
<#
                            }
                            {
                                List<string> fltFlds = new List<string>();
                                fltFlds= GetHiddenFilterDisablingFields(Model, Context, modelViewUIFormPropertySerializable.ForeignKeyNameChain, fltFlds);
                                if(fltFlds == null) {
#>
////////// nothing
<#
                                }
                                if (fltFlds != null) {
                                    if (fltFlds.Count > 0) {
#>
            let isDsbl: boolean = false;
<#
                                        foreach(string fltFld in fltFlds) {
#>
            isDsbl = isDsbl ? isDsbl : this.state.<#= HiddenFilterPropName #>.some(v => v.fltrName === '<#= fltFld #>');
<#
                                        }
                                    }
                                }
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Disabled = isDsbl;
<#
                                } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Disabled = isDsbl;
<#
                                } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #> =  isDsbl;
<#
                                }
                            }
                        } else {
#>
            let isDsbl: boolean = false;
<#
                            foreach(ModelViewUIFormPropertySerializable masterProp in directMasters) {
                                if (GetInputTypeWhenXXX(masterProp, inptTp) == InputTypeEnum.Combo) {
#>
            if(this.<#= GetTypeScriptPropertyNameWithSufix(masterProp, Model, ComboSufix) #>) {
                isDsbl = isDsbl ? isDsbl : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(masterProp, Model, ComboSufix) #>.Value === 'undefined');
                isDsbl = isDsbl ? isDsbl : (this.<#= GetTypeScriptPropertyNameWithSufix(masterProp, Model, ComboSufix) #>.Value === null);
            } else isDsbl = true;
<#
                                } else if (GetInputTypeWhenXXX(masterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            if(this.<#= GetTypeScriptPropertyNameWithSufix(masterProp, Model, TypeaheadSufix) #>) {
                isDsbl = isDsbl ? isDsbl : ((typeof this.<#= GetTypeScriptPropertyNameWithSufix(masterProp, Model, TypeaheadSufix) #>.Value === 'undefined') || 
                                            (typeof this.<#= GetTypeScriptPropertyNameWithSufix(masterProp, Model, TypeaheadSufix) #>.Value === 'string'));
                isDsbl = isDsbl ? isDsbl : (this.<#= GetTypeScriptPropertyNameWithSufix(masterProp, Model, TypeaheadSufix) #>.Value === null);
            } else  isDsbl = true;
<#
                                } else if (GetInputTypeWhenXXX(masterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            isDsbl = isDsbl ? isDsbl : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(masterProp, Model, ButtonSufix) #> === 'undefined') ;
            isDsbl = isDsbl ? isDsbl : (this.<#= GetTypeScriptPropertyNameWithSufix(masterProp, Model, ButtonSufix) #> === null);
<#
                                }
                            }
                            {
                                List<string> fltFlds = new List<string>();
                                fltFlds= GetHiddenFilterDisablingFields(Model, Context, modelViewUIFormPropertySerializable.ForeignKeyNameChain, fltFlds);
                                if(fltFlds == null) {
#>
////////// nothing
<#
                                }
                                if (fltFlds != null) {
                                    if (fltFlds.Count > 0) {
#>
            if(!isDsbl) {
<#
                                        foreach(string fltFld in fltFlds) {
#>
                isDsbl = isDsbl ? isDsbl : this.state.<#= HiddenFilterPropName #>.some(v => v.fltrName === '<#= fltFld #>');
<#
                                        }
#>
            }
<#
                                    }
                                }
                            }
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Disabled = isDsbl;
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Disabled = isDsbl;
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #> =  isDsbl;
<#
                            }
                        }
#>
            if (hasNoVal) { 
<#
                                foreach(ModelViewUIFormPropertySerializable dependentModelViewUIFormPropertySerializable in dependentScalarProps) {
                                        ModelViewPropertyOfVwSerializable viewProp =
                                            GetOnValChangeViewPropName(Context, Model, modelViewUIFormPropertySerializable, dependentModelViewUIFormPropertySerializable, inptTp);
                                        if(viewProp != null) {
#>
                this.<#= GetTypeScriptPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>.Value = null;    
<#
                                        } else {
#>
// error: with method GetOnValChangeViewPropName() no mapping for view <#= viewName #> and props pair <#= modelViewUIFormPropertySerializable.ViewPropertyName  #> and <#= dependentModelViewUIFormPropertySerializable.ViewPropertyName  #>
<#
                                        }
                                } // foreach(ModelViewUIFormPropertySerializable dependentModelViewUIFormPropertySerializable in dependentScalarProps) {
                                foreach(ModelViewPropertyOfVwSerializable locViewPrimKey in locViewPrimKeys) {
                                    List<ModelViewPropertyOfVwSerializable> dependentPkScalarProps = GetForeignKeyPropByIndirectPrimaryKeyPropEx(Model, modelViewUIFormPropertySerializable, locView, Context, locViewPrimKey);
                                    if (dependentPkScalarProps != null) {
                                        foreach(ModelViewPropertyOfVwSerializable dependentPkScalarProp in dependentPkScalarProps) {
                                            if(!dependentScalarProps.Any(p => p.ViewPropertyName == dependentPkScalarProp.ViewPropertyName)) {
#>
                this.<#= GetTypeScriptPropertyName(dependentPkScalarProp, Model) #>.Value = null;
<#
                                            }
                                        }
                                    }
                                }

#>
            } else {
<#
                                foreach(ModelViewUIFormPropertySerializable dependentModelViewUIFormPropertySerializable in dependentScalarProps) {

                                        ModelViewPropertyOfVwSerializable viewProp =
                                            GetOnValChangeViewPropName(Context, Model, modelViewUIFormPropertySerializable, dependentModelViewUIFormPropertySerializable, inptTp);
                                        if(viewProp != null) {

#>
                if(typeof inVal.<#=  GetTypeScriptPropertyName(viewProp, locView) #> === 'undefined') {
                    this.<#= GetTypeScriptPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>.Value = null;
                } else {
                    this.<#= GetTypeScriptPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>.Value = inVal.<#=  GetTypeScriptPropertyName(viewProp,locView) #>;
                }
<#
                                        } else {
#>
// error: with method GetOnValChangeViewPropName() no mapping for view <#= viewName #> and props pair <#= modelViewUIFormPropertySerializable.ViewPropertyName  #> and <#= dependentModelViewUIFormPropertySerializable.ViewPropertyName  #>
<#
                                        }
                                }
                                foreach(ModelViewPropertyOfVwSerializable locViewPrimKey in locViewPrimKeys) {
                                    List<ModelViewPropertyOfVwSerializable> dependentPkScalarProps = GetForeignKeyPropByIndirectPrimaryKeyPropEx(Model, modelViewUIFormPropertySerializable, locView, Context, locViewPrimKey);
                                    if (dependentPkScalarProps != null) {
                                        foreach(ModelViewPropertyOfVwSerializable dependentPkScalarProp in dependentPkScalarProps) {
                                            if(!dependentScalarProps.Any(p => p.ViewPropertyName == dependentPkScalarProp.ViewPropertyName)) {
#>
                if(typeof inVal.<#=  GetTypeScriptPropertyName(locViewPrimKey, locView) #> === 'undefined') {
                    this.<#= GetTypeScriptPropertyName(dependentPkScalarProp, Model) #>.Value = null;
                } else {
                    this.<#= GetTypeScriptPropertyName(dependentPkScalarProp, Model) #>.Value =  inVal.<#=  GetTypeScriptPropertyName(locViewPrimKey, locView) #>;
                }
<#
                                            }
                                        }
                                    }
                                }
#>
            }
<#
                            }
                        foreach(ModelViewUIFormPropertySerializable dtlModelViewUIFormPropertySerializable in details) {
                            if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            if(dscrdChld) {
                this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value = null;
                this.<#= GetExpressionForControlList(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>=[];
                await this.<#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(null, dscrdChld);
            } else {
                await this.<#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value, dscrdChld);
            }
            await this.<#= GetExpressionForOnUpdateComboControlListMethod(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                            } else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            if(dscrdChld) {
                this.<#=  GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value = null;
                await this.<#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(null, dscrdChld);
            } else {
                await this.<#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value, dscrdChld);
            }
<#
                            } else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            if(dscrdChld) {
                this.<#= GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #>  = null;
                await this.<#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(null, dscrdChld);
            } else {
                await this.<#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(this.<#=  GetTypeScriptPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #>, dscrdChld); 
            }
<#
                            }
                        }
#>
        }
<#  
                        } // if ((dependentScalarProps.Count > 0) || (details.Count > 0)) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }
<#  
                } // if (HasInitMethod(modelViewUIFormPropertySerializable, Model)) {
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end  OnValChange...()-generator
#>

<# //////////////////////////// start SearchButtonClick()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (HasButton(modelViewUIFormPropertySerializable, Model) &&  modelViewUIFormPropertySerializable.IsShownInView) {
#>

    <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>(): void {
<#
                {
                bool genElse = false;
                for(int inptTp = 1; inptTp < 4; inptTp++) {

        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                    if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                        ModelViewSerializable locView = 
                            GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        string viewName = ""; 
                        if (locView != null) {
                            viewName = locView.ViewName;
                        }
                        string dlgComponentPropNm   = GetModelComponentClassName(locView, sdlgComponentDataModelFolder);
                        List<ModelViewUIFormPropertySerializable> directMasters = 
                            GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
#>
            let hasNoVal: boolean = false;
            let flt: Array< <#= webServiceFilterRsltDataModelClassName #> >=[];
<#
                        if (directMasters.Count > 0) {
                              List<ModelViewPropertyOfVwSerializable> allForeignKeyProps = GetAllForeignKeyProps(locView);
                              foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value === 'undefined');
            hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value === null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value === 'undefined');
            hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value === null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> === 'undefined');
            hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> === null);
<#
                                    }
#>                    
            if (! hasNoVal) {
<#
                                    foreach(ModelViewPropertyOfVwSerializable masterProp in masterPrimKeyProps) {
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === 'undefined');
                hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === 'undefined');
                hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                hasNoVal = hasNoVal ? hasNoVal : (typeof this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #>.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === 'undefined');
                hasNoVal = hasNoVal ? hasNoVal : (this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #>.<#= GetTypeScriptPropertyName(masterProp, masterView) #> === null);
<#
                                        }
                                    }
#>
            }
<#
                            } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
#>
            if (hasNoVal) {
                let msg = {
                    message:'Could not start dialog: not all master data is defined.'
                };
                this.context.<#= ShowErrorMethodName #>('Form Error', msg)
                return;                           
            }
<#
                                foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                    if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                    }
                                    for(int loci = 0; loci < detailForeignKeyProps.Count; loci++) {
                                        if(loci < masterPrimKeyProps.Count) {
                                            if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            flt.push({
                fltrName: '<#= GetTypeScriptPropertyName(detailForeignKeyProps[loci], locView) #>',
                fltrDataType: '<#= GetCCharpDatatype(detailForeignKeyProps[loci], Model) #>',
                fltrOperator: 'eq',
                fltrValue: this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #>.Value.<#= GetTypeScriptPropertyName(masterPrimKeyProps[loci], masterView) #>
            });
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            flt.push({
                fltrName: '<#= GetTypeScriptPropertyName(detailForeignKeyProps[loci], locView) #>',
                fltrDataType: '<#= GetCCharpDatatype(detailForeignKeyProps[loci], Model) #>',
                fltrOperator: 'eq',
                fltrValue: this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #>.Value.<#= GetTypeScriptPropertyName(masterPrimKeyProps[loci], masterView) #>
            });
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            flt.push({
                fltrName: '<#= GetTypeScriptPropertyName(detailForeignKeyProps[loci], locView) #>',
                fltrDataType: '<#= GetCCharpDatatype(detailForeignKeyProps[loci], Model) #>',
                fltrOperator: 'eq',
                fltrValue: this.<#= GetTypeScriptPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #>.<#= GetTypeScriptPropertyName(masterPrimKeyProps[loci], masterView) #>
            });
<#
                                            }
                                        }
                                    }
                                } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                        } // if (directMasters.Count > 0) {
#>
            this.setState({ <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, OpenModalSufix) #>: true, <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, HiddenFilterModalSufix) #>: flt });
        }
<#    
                    }
                }
            }   
#>
    }
<# //////////////////////////// end SearchButtonClick()-generator
#>
    async <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchCloseSufix) #>(rslt: boolean,  slctdItms?: Array<any>) {
        this.setState({ <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, OpenModalSufix) #>: false });
        if(!rslt) return;
        if (slctdItms) {
            if(slctdItms.length < 1) return;
        
<#
            {
                bool genElse = false;
                for(int inptTp = 1; inptTp < 4; inptTp++) {

        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;

                    if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                        ModelViewSerializable locView = 
                            GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        string viewName = ""; 
                        if (locView != null) {
                            viewName = locView.ViewName;
                        }
                        string dlgComponentPropNm   = GetModelComponentClassName(locView, sdlgComponentDataModelFolder);
                        List<ModelViewUIFormPropertySerializable> directMasters = 
                            GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);

        if (inptTp ==1) {
#>
            <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#>     || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#>     || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
            <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#>     || (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
            <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
#>
                if (slctdItms) {
                    if (slctdItms.length > 0) {
                        // @ts-ignore
                        this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = slctdItms[0] as <#= GetInterfaceName(locView) #>;
                        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>, true);
                        this.toState();
                    }
                }
            }
<#
                    }
                }
            }
#>
        }
    }

<#    
        }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) &&  modelViewUIFormPropertySerializable.IsShownInView) {
                string addPropName = GetControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, 1);
#>
<# //////////////////////////// start DisplayFn() for Typeahead control in Add-mode -generator
#>
    <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadAddDisplaySufix) #>(val: any): string {
        if(typeof val === 'undefined') {
            return '';
        }
        return val && val.<#= addPropName #> ? val.<#= addPropName #> : '';
    }
<# //////////////////////////// end DisplayFn() for Typeahead control in Add-mode -generator
#>

<#    
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) &&  modelViewUIFormPropertySerializable.IsShownInView) {
                string updPropName = GetControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, 2);
#>
<# //////////////////////////// start DisplayFn() for Typeahead control in Update-mode -generator
#>

    <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadUpdDisplaySufix) #>(val: any): string {
        if(typeof val === 'undefined') {
            return '';
        }
        return val && val.<#= updPropName #> ? val.<#= updPropName #> : '';
    }
<# //////////////////////////// end DisplayFn() for Typeahead control in Update-mode -generator
#>

<#    
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) &&  modelViewUIFormPropertySerializable.IsShownInView) {
                string delPropName = GetControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, 3);
#>
<# //////////////////////////// start DisplayFn() for Typeahead control in delete-mode -generator
#>

    <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadDelDisplaySufix) #>(val: any): string {
        if(typeof val === 'undefined') {
            return '';
        }
        return val && val.<#= delPropName #> ? val.<#= delPropName #> : '';
    }
<# //////////////////////////// end DisplayFn() for Typeahead control in delete-mode -generator
#>

<#    
            }
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>



<#
    {
        for(int i = 0; i < Model.UIFormProperties.Count; i++) {
            bool checkBoxNotAdded = true;
            bool comboNotAdded = true;
            bool typeaheadNotAdded = true;
            bool noSufixNotAdded = true;
            ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable = Model.UIFormProperties[i];
            if (modelViewUIFormPropertySerializable.IsShownInView) {
                InputTypeEnum InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenAdd;
                if (InputTypeWhenXXX != InputTypeEnum.Hidden) {
                    if ((InputTypeWhenXXX == InputTypeEnum.Combo) && comboNotAdded) {
#>
    async <#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>(event: any) {
        this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value = event.target.value;
        this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Touched = true;
<#
                        if (HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
        await this.<#=  GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(event.target.value, true);
        this.toState();
<#
                        } else {
#>
        this.setState({ <#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>: { Errors: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Errors, Invalid: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.InvalidEx, Disabled: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Disabled, Value: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value } });
        this.setState({ <#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: { Errors: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Errors, Invalid: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.InvalidEx, Disabled: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled, Value: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value } });
<#
                        }
#>
    }

<#
                        comboNotAdded = false;
                    } else if ((InputTypeWhenXXX == InputTypeEnum.Typeahead) && typeaheadNotAdded) {
#>
    async <#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>(event: any, newValue: any) {
        this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value = newValue;
        this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Touched = true;
<#    
                    if (HasInitMethod(modelViewUIFormPropertySerializable, Model) && HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
        await this.<#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(newValue, true);
        this.toState();
<#
                    } else {
#>
        this.setState({<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>: { Errors: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Errors, Invalid: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.InvalidEx, Disabled: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Disabled, Value: this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value } });
        this.setState({ <#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: { Errors: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Errors, Invalid: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.InvalidEx, Disabled: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled, Value: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value } });
<#
                    }
#>
    } 

    async <#= GetExpressionForBaseOnInputMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>(event: any, newValue: string) {
        if (this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value && newValue) {
<#
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) &&  modelViewUIFormPropertySerializable.IsShownInView) {
                string addPropName = GetControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, 1);
#>
            if (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(1) #>) { 
                if (this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value.<#= addPropName #> === newValue) {
                    return;
                }
            }
<#
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) &&  modelViewUIFormPropertySerializable.IsShownInView) {
                string updPropName = GetControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, 2);
#>
            if (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(2) #>) { 
                if (this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value.<#= updPropName #> === newValue) {
                    return;
                }
            }
<#
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) &&  modelViewUIFormPropertySerializable.IsShownInView) {
                string delPropName = GetControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, 3);
#>
            if (this.state.<#=  EformModePropName #> === <#=  eformModeEnumName #>.<#=GetInputTypeToEnumName(3) #>) { 
                if (this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value.<#= delPropName #> === newValue) {
                    return;
                }
            }
<#
            }
#>
        }
        await this.<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>(newValue);
        this.toState();
    } 
    async <#= GetExpressionForBaseOnOpenMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>() {
        let ndf: boolean =  (this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value) ? false : true;
        if(this.<#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>) {
            if (ndf &&  (this.<#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.length < 1)) {
                await this.<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>(null);
                this.toState();
            }
        } else {
            if(ndf) {
                await this.<#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>(null);
                this.toState();
            }
        }
    }
<#
                        typeaheadNotAdded = false;
                    } else if(IsBooleanInput(modelViewUIFormPropertySerializable, Model) &&  checkBoxNotAdded) {
#>
    <#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, CheckBoxSufix) #>(event: any, checked: boolean) {
        this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value = checked;
        this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Touched = true;
        this.setState({<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: { Errors: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Errors, Invalid: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.InvalidEx, Disabled: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled, Value: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value } });
   }
<#
                        checkBoxNotAdded = false;
                    } else if(noSufixNotAdded) {
                        if (!((InputTypeWhenXXX == InputTypeEnum.ReadOnly) || HasButton(InputTypeWhenXXX))) {

                            if (IsDateTimeInput(modelViewUIFormPropertySerializable, Model)) {
#>
    <#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, NoSufix) #>(dateVal: any) {
        this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value = dateVal;
        this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Touched = true;
        this.setState({<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: { Errors: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Errors, Invalid: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.InvalidEx, Disabled: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled, Value: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value } });
   } 
<#
                            } else {
#>
    <#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, NoSufix) #>(event: any) {
        this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value = event.target.value;
        this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Touched = true;
        this.setState({<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: { Errors: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Errors, Invalid: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.InvalidEx, Disabled: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled, Value: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value } });
   } 
<#
                            }
                            noSufixNotAdded = false;
                        }
                    }
                }
            }
        }
    }
#>

    public checkValid(): boolean {
        let rslt: boolean = true;
<#  
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
        this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Validate();
        this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Touched = true;
        rslt = rslt &&  this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Valid;    
<#
    } 
#>
        this.scalarsToState();
        return rslt;
    }

    public controlsToModel(): <#= GetInterfaceName(Model) #> | null {
        if (!this.checkValid()) return null;
        return {
<#  
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
            <#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>: this.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value,
<#
    } 
#>
        }
    }

    public doSubmit() {
        let val: <#= GetInterfaceName(Model) #> | null = this.controlsToModel();
        if(this.props.<#= BeforeSubmitPropName #>) this.props.<#= BeforeSubmitPropName #>(this, val);
        if (val === null) return;

        if (this.state.<#= EformModePropName #> === <#= eformModeEnumName #>.<#= GetInputTypeToEnumName(1) #>) { 
            <#= GetJavaScriptServiceName(Model) #>.<#= AddOneMethodName #>(this.context, val)
            .then((res: any) => res.json())
            .then(
                (respdata: <#= GetInterfaceName(Model) #> ) => { // success path
                    if(this.props.<#= AfterSubmitPropName #>) this.props.<#= AfterSubmitPropName #>(this, false, respdata);
                },
                (error: any) => { // error path
                    this.context.<#= ShowErrorMethodName #>('http', error);
                    if(this.props.<#= AfterSubmitPropName #>) this.props.<#= AfterSubmitPropName #>(this, true, val);
                }
            );
        } else if (this.state.<#= EformModePropName #> === <#= eformModeEnumName #>.<#=GetInputTypeToEnumName(2) #>) { 
            <#= GetJavaScriptServiceName(Model) #>.<#= UpdateOneMethodName #>(this.context, val)
            .then((res: any) => res.json())
            .then(
                (respdata: <#= GetInterfaceName(Model) #> ) => { // success path
                    if(this.props.<#= AfterSubmitPropName #>) this.props.<#= AfterSubmitPropName #>(this, false, respdata);
                },
                (error: any) => { // error path
                    this.context.<#= ShowErrorMethodName #>('http', error);
                    if(this.props.<#= AfterSubmitPropName #>) this.props.<#= AfterSubmitPropName #>(this, true, val);
                }
            );

        } else if (this.state.<#= EformModePropName #> === <#= eformModeEnumName #>.<#=GetInputTypeToEnumName(3) #>) { 
            <#= GetJavaScriptServiceName(Model) #>.<#= DeleteOneMethodName #>(this.context 
<#          {    
                List<ModelViewPropertyOfVwSerializable> primKeys =  GetModelPrimaryKeyProps(Model);
                foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
#>  
                    ,this.<#= GetTypeScriptPropertyName(prop, Model) #>.value 
<#
                }
            }
            #>
            )
            .then((res: any) => res.json())
            .then(
                (respdata: <#= GetInterfaceName(Model) #> ) => { // success path
                    if(this.props.<#= AfterSubmitPropName #>) this.props.<#= AfterSubmitPropName #>(this, false, respdata);
                },
                (error: any) => { // error path
                    this.context.<#= ShowErrorMethodName #>('http', error);
                    if(this.props.<#= AfterSubmitPropName #>) this.props.<#= AfterSubmitPropName #>(this, true, val);
                }
            );
        }
    }

    public ValForInput(value: any): any {
        if(typeof value === 'undefined') return '';
        if(value === null) return '';
        return value;
    }


    render () {
        let htmlitems = [];
        let cptnsitems = []; 
        let hstl: CSSProperties = <#= rowFlexFunctionName #>() as CSSProperties;
        let lstl: CSSProperties = { marginRight: 'auto', marginLeft:'20%' };
        let stl3:  CSSProperties = <#= colFlexFunctionName #>({ dflt: '3%' })  as  CSSProperties;
        hstl.justifyContent = 'flex-end'; 
        if(this.props.<#= CaptionPropName #>    ) { 
            cptnsitems.push(<label key={1} style={lstl}>{this.props.<#= CaptionPropName #>}</label>);
            cptnsitems.push(<span key={2} style={stl3}></span>);
        }
        if(this.props.contMenuItems) {
            let ii: number = 1000;
            this.props.contMenuItems?.forEach(cmi => {
                ii++;
                cptnsitems.push(
                    <Tooltip title={cmi.caption}>
                        <IconButton key={ii} color={cmi.iconColor as PropTypes.Color}  size="small" onClick={() => this.<#= OnContMenuItemMethodName #>(cmi)}>
                            <Icon color={cmi.iconColor as PropTypes.Color} fontSize="small">{cmi.iconName}</Icon> 
                        </IconButton>
                    </Tooltip>
                )
            });
        }
        htmlitems.push(
            <div key={12} className="fx-flex-base-row" style={hstl}>
                { cptnsitems }
            </div>
        );



        let eformMode: <#= eformModeEnumName #> = <#= eformModeEnumName #>.<#= GetInputTypeToEnumName(3) #>;
        if(this.props.eformMode) {
            eformMode = this.props.eformMode;
        }
<#
    int AddCnt = 0;
    int Add2Cnt = 0;
    int Add3Cnt = 0;
    int Add1Wdth = 0;
    int[] Add2Wdth = new int[] {0, 0};
    int[] Add3Wdth = new int[] {0, 0};

    int UpdateCnt = 0;
    int Update2Cnt = 0;
    int Update3Cnt = 0;
    int Update1Wdth = 0;
    int[] Update2Wdth = new int[] {0, 0};
    int[] Update3Wdth = new int[] {0, 0};

    int DeleteCnt = 0;
    int Delete2Cnt = 0;
    int Delete3Cnt = 0;
    int Delete1Wdth = 0;
    int[] Delete2Wdth = new int[] {0, 0};
    int[] Delete3Wdth = new int[] {0, 0};

    for (int InputTypeId = 1; InputTypeId <= 3; InputTypeId++) {
        if (InputTypeId < 3) {
#>
        if (eformMode === <#=  eformModeEnumName #>.<#= GetInputTypeToEnumName(InputTypeId) #>) {
<#
        }
#>
            return (
<MuiPickersUtilsProvider utils={DateFnsUtils}>
    <div className="<#= fxFlexBaseRowCssClassName #>" style={<#= rowFlexFunctionName #>({ dflt: 'column' }) as CSSProperties}>
        { htmlitems }
        <div className="<#= fxFlexBaseRowCssClassName #>" style={<#= rowFlexFunctionName #>({ dflt: 'row' }) as CSSProperties}>
<#
{
    bool isNewLine = false;
    for(int i = 0; i < Model.UIFormProperties.Count; i++) {
        ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable = Model.UIFormProperties[i];
        if (isNewLine || i == 0) {
            isNewLine = false;

            for (int k = i; k < Model.UIFormProperties.Count; k++) {
                if (Model.UIFormProperties[k].IsShownInView && (Model.UIFormProperties[k].InputTypeWhenAdd != InputTypeEnum.Hidden)) {
                    AddCnt++;
                }
                if (Model.UIFormProperties[k].IsShownInView && (Model.UIFormProperties[k].InputTypeWhenUpdate != InputTypeEnum.Hidden)) {
                    UpdateCnt++;
                }
                if (Model.UIFormProperties[k].IsShownInView && (Model.UIFormProperties[k].InputTypeWhenDelete != InputTypeEnum.Hidden)) {
                    DeleteCnt++;
                }
                if (Model.UIFormProperties[k].IsNewLineAfter) break;
            }

            if(AddCnt == 0) {
                    Add1Wdth = percentEq100;
                    Add2Wdth[0] = percentEq100;
                    Add2Wdth[1] = percentEq100;
                    Add3Wdth[0] = percentEq100;
                    Add3Wdth[1] = percentEq100;
            } else {
                Add1Wdth = 100 / AddCnt;
                Add2Cnt = AddCnt >> 1;
                if (Add2Cnt < 1) { 
                    Add2Wdth[0] = percentEq100;
                } else {
                    Add2Wdth[0] = 100 / Add2Cnt;
                }
                Add2Wdth[1] = 100 / (AddCnt - Add2Cnt);

                Add3Cnt = AddCnt / 3;
                if(Add3Cnt < 1) {
                    Add3Wdth[0] = percentEq100;
                    Add3Wdth[1] = percentEq100;
                } else {
                    if(Add3Cnt == 1) {
                        Add3Wdth[0] = percentEq100;
                    } else {                    
                        Add3Wdth[0] = 100 / Add3Cnt;
                    }
                    Add3Cnt = Add3Cnt * 3;
                    if ((AddCnt - Add3Cnt) > 1) {
                        Add3Wdth[1] = 100 / (AddCnt - Add3Cnt);
                    } else {
                        Add3Wdth[1] = percentEq100;
                    }
                }

            }

            if(UpdateCnt == 0) {
                    Update1Wdth = percentEq100;
                    Update2Wdth[0] = percentEq100;
                    Update2Wdth[1] = percentEq100;
                    Update3Wdth[0] = percentEq100;
                    Update3Wdth[1] = percentEq100;
            } else {
                Update1Wdth = 100 / UpdateCnt;
                Update2Cnt = UpdateCnt >> 1;
                if (Update2Cnt < 1) { 
                    Update2Wdth[0] = percentEq100;
                } else {
                    Update2Wdth[0] = 100 / Update2Cnt;
                }
                Update2Wdth[1] = 100 / (UpdateCnt - Update2Cnt);


                Update3Cnt = UpdateCnt / 3;
                if(Update3Cnt < 1) {
                    Update3Wdth[0] = percentEq100;
                    Update3Wdth[1] = percentEq100;
                } else {
                    if(Update3Cnt == 1) {
                        Update3Wdth[0] = percentEq100;
                    } else {                    
                        Update3Wdth[0] = 100 / Update3Cnt;
                    }
                    Update3Cnt = Update3Cnt * 3;
                    if ((UpdateCnt - Update3Cnt) > 1) {
                        Update3Wdth[1] = 100 / (UpdateCnt - Update3Cnt);
                    } else {
                        Update3Wdth[1] = percentEq100;
                    }
                }
            }

            if(DeleteCnt == 0) {
                    Delete1Wdth = percentEq100;
                    Delete2Wdth[0] = percentEq100;
                    Delete2Wdth[1] = percentEq100;
                    Delete3Wdth[0] = percentEq100;
                    Delete3Wdth[1] = percentEq100;
            } else {
                Delete1Wdth = 100 / DeleteCnt;
                Delete2Cnt = DeleteCnt >> 1; 
                if (Delete2Cnt < 1) { 
                    Delete2Wdth[0] = percentEq100;
                } else {
                    Delete2Wdth[0] = 100 / Delete2Cnt;
                }
                Delete2Wdth[1] = 100 / (DeleteCnt - Delete2Cnt);

                Delete3Cnt = DeleteCnt / 3;
                if(Delete3Cnt < 1) {
                    Delete3Wdth[0] = percentEq100;
                    Delete3Wdth[1] = percentEq100;
                } else {
                    if(Delete3Cnt == 1) {                    
                        Delete3Wdth[0] = percentEq100;
                    } else {
                        Delete3Wdth[0] = 100 / Delete3Cnt;
                    }
                    Delete3Cnt = Delete3Cnt * 3;
                    if ((DeleteCnt - Delete3Cnt) > 1) {
                        Delete3Wdth[1] = 100 / (DeleteCnt - Delete3Cnt);
                    } else {
                        Delete3Wdth[1] = percentEq100;
                    }
                }
            }
            AddCnt = 0;
            UpdateCnt = 0;
            DeleteCnt = 0;
        }
        if (modelViewUIFormPropertySerializable.IsShownInView) {
                InputTypeEnum InputTypeWhenXXX ;
                int XXXCnt ;
                int XXX2Cnt ;
                int XXX3Cnt ;
                int   XXX1Wdth ;
                int[] XXX2Wdth ;
                int[] XXX3Wdth ;
                switch (InputTypeId) {
                    case 1: 
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenAdd;
                        XXXCnt   = AddCnt;
                        XXX2Cnt  = Add2Cnt;
                        XXX3Cnt  = Add3Cnt;
                        XXX1Wdth = Add1Wdth;
                        XXX2Wdth = Add2Wdth;
                        XXX3Wdth = Add3Wdth;
                        break;
                    case 2: 
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenUpdate;
                        XXXCnt   = UpdateCnt;
                        XXX2Cnt  = Update2Cnt;
                        XXX3Cnt  = Update3Cnt;
                        XXX1Wdth = Update1Wdth;
                        XXX2Wdth = Update2Wdth;
                        XXX3Wdth = Update3Wdth;
                        break;
                    default: 
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenDelete;
                        XXXCnt   = DeleteCnt;
                        XXX2Cnt  = Delete2Cnt;
                        XXX3Cnt  = Delete3Cnt;
                        XXX1Wdth = Delete1Wdth;
                        XXX2Wdth = Delete2Wdth;
                        XXX3Wdth = Delete3Wdth;
                        break;
                }
                if (XXX1Wdth == 100) {
                    XXX1Wdth = percentEq100;
                }

                if (InputTypeWhenXXX != InputTypeEnum.Hidden) {
                    if(InputTypeWhenXXX == InputTypeEnum.Combo) {
#>
                <span   style={<#= colFlexFunctionName #>({ scrn: this.state.scrn, dflt: '<#= percentEq100.ToString() #>%', lg: '<#= GetXXX1Wdth(XXX1Wdth, percentEq100).ToString() #>%', md: '<#= GetGreaterThanPercent(XXXCnt, XXX2Cnt, XXX2Wdth,percentEq100) #>%', sm: '<#= GetGreaterThanPercent(XXXCnt, XXX3Cnt, XXX3Wdth,percentEq100) #>%'})} >
                    <TextField select fullWidth  InputLabelProps={{ shrink: true }}
                        value={ (this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> === null) ? '' : this.ValForInput( this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Value) }
                        onChange={ this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> }
                        label="<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#>"
                        placeholder="<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#>"
                        variant="outlined" margin="dense"
                        disabled={ (this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> === null) ? true : this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>.Disabled }
                        error={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid }
                        helperText={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid ? 
                            this.getErrorMessage(this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>) as string : 
                            '<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty) #>' 
                        }
                        SelectProps={{ multiple: false }}
                        children= {  
                            (this.state.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> === null) ? [] :
                            this.state.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>
                            .map( (f,i) => { return <MenuItem key={i} 
                            // @ts-ignore
                            value={f}>{f.<#= GetComboControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, InputTypeId) #>}</MenuItem> } ) 
                        }/>
                </span>
<#
                    } /// if(InputTypeWhenXXX == InputTypeEnum.Combo) {}
                    else if(InputTypeWhenXXX == InputTypeEnum.Typeahead) {
#>
                <span   style={<#= colFlexFunctionName #>({ scrn: this.state.scrn, dflt: '<#= percentEq100.ToString() #>%', lg: '<#= GetXXX1Wdth(XXX1Wdth, percentEq100).ToString() #>%',md: '<#= GetGreaterThanPercent(XXXCnt, XXX2Cnt, XXX2Wdth,percentEq100) #>%', sm: '<#= GetGreaterThanPercent(XXXCnt, XXX3Cnt, XXX3Wdth,percentEq100) #>%'})} >
                    <Autocomplete fullWidth
                      value={ (this.state.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> === null) ? '' : this.ValForInput(this.state.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Value) }
                      onChange={ this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> }
                      onInputChange={ this.<#= GetExpressionForBaseOnInputMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> }
                      onOpen={ this.<#= GetExpressionForBaseOnOpenMethodWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> }
                      disabled={ (this.state.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> === null) ? true : this.state.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>.Disabled }
                      options={ (this.state.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> === null) ? [] : this.state.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> }
                      getOptionLabel={(option) => (typeof option === 'string' ? option : option.<#= GetTypeaheadControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, InputTypeId) #>)}
                      getOptionSelected={(option, value) => { return option===value }}
                      renderInput={(params) => 
                            <TextField {...params}   InputLabelProps={{ shrink: true }} margin="dense"
                                label='<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#>' 
                                error={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid }
                                helperText={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid ? 
                                    this.getErrorMessage(this.state.<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>) as string : 
                                    '<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty) #>'
                                }
                            variant="outlined" />
                        }
                    />
                </span>
<#
                        typeAheadNo++;
                    } /// if(InputTypeWhenXXX == InputTypeEnum.Typeahead) {}
                    else  
                    {
#>
                <span   style={<#= colFlexFunctionName #>({ scrn: this.state.scrn, dflt: '<#= percentEq100.ToString() #>%', lg: '<#= GetXXX1Wdth(XXX1Wdth, percentEq100).ToString() #>%',md: '<#= GetGreaterThanPercent(XXXCnt, XXX2Cnt, XXX2Wdth,percentEq100) #>%', sm: '<#= GetGreaterThanPercent(XXXCnt, XXX3Cnt, XXX3Wdth,percentEq100) #>%'})} >
<#
                            bool hasButton = HasButton(InputTypeWhenXXX);
                            if(IsBooleanInput(modelViewUIFormPropertySerializable, Model)) {
                                if (InputTypeWhenXXX == InputTypeEnum.ReadOnly) {
#>
                        <FormControlLabel disabled control={<Checkbox checked={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value } />} 
                                    onChange={ this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, CheckBoxSufix) #> }
                                    label="<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty) #>" />
<#
                                } else {
#>
                        <FormControlLabel disabled={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled } control={<Checkbox checked={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value } />} 
                                    onChange={ this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, CheckBoxSufix) #> }
                                    label="<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty) #>" />
<#
                                }
                            } else {
                                if (IsDateTimeInput(modelViewUIFormPropertySerializable, Model)) {
                                    if (hasButton || (InputTypeWhenXXX == InputTypeEnum.ReadOnly)) {
                                        if (IsDateInput(modelViewUIFormPropertySerializable, Model)) {
#>
                        <KeyboardDatePicker fullWidth  InputLabelProps={{ shrink: true }}
<#
                                        } else {
#>
                        <KeyboardDateTimePicker fullWidth  InputLabelProps={{ shrink: true }}
<#
                                        }
#>
                            onChange={()=>{}}
                            value={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value }
                            error={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid }
                            label="<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#>"
                            helperText={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid ? 
                                this.getErrorMessage(this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>) as string : 
                                '<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty) #>'
                            }
                            margin="dense" disabled={true}  
                            autoOk
                            inputVariant='outlined' // variant="outlined" 
                            variant="inline" 
                            InputAdornmentProps={{ position: "start" }}
<#
                                        if (IsDateInput(modelViewUIFormPropertySerializable, Model)) {
#>
                            views={["year", "month", "date"]}
                            format='PP'
<#
                                        } else {
#>
                            format='PPpp'
<#
                                        }
                                        if(hasButton) {
#>
                            InputProps={{
                              endAdornment: (
                                <InputAdornment position="end">
                                    <IconButton color="primary" size="small" 
                                        disabled={this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>} 
                                        onClick={this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>}>
                                            <Icon color="primary" >search</Icon> 
                                    </IconButton>            
                                </InputAdornment>)              
                            }}
<#
                                        }
#>
                        />
<#
                                    } else {
                                        if (IsDateInput(modelViewUIFormPropertySerializable, Model)) {
#>
                        <KeyboardDatePicker fullWidth  InputLabelProps={{ shrink: true }}
<#
                                        } else {
#>
                        <KeyboardDateTimePicker fullWidth  InputLabelProps={{ shrink: true }}
<#
                                        }
#>
                            onChange={ this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, NoSufix) #> }
                            value={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value }
                            error={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid }
                            label="<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#>"
                            helperText={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid ? 
                                this.getErrorMessage(this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>) as string : 
                                '<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty) #>'
                            }
                            // inputProps = {{ type: 'date' }}
                            margin="dense" disabled={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled }
                            autoOk
                            inputVariant='outlined' // variant="outlined" 
                            variant="inline" 
                            InputAdornmentProps={{ position: "start" }}
<#
                                        if (IsDateInput(modelViewUIFormPropertySerializable, Model)) {
#>
                            format='PP'
                            views={["year", "month", "date"]}
<#
                                        } else {
#>
                            format='PPpp'
<#
                                        }
                                        if(hasButton) {
#>
                            InputProps={{
                              endAdornment: (
                                <InputAdornment position="end">
                                    <IconButton color="primary" size="small" 
                                        disabled={this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>} 
                                        onClick={this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>}>
                                            <Icon color="primary" >search</Icon> 
                                    </IconButton>            
                                </InputAdornment>)              
                            }}
<#
                                        }
#>
                        />
<#
                                    }
                                } // if (IsDateTimeInput(modelViewUIFormPropertySerializable, Model)) 
                                else {
                                    if(IsMemoInput(modelViewUIFormPropertySerializable, Model)) {
                                        if (hasButton || (InputTypeWhenXXX == InputTypeEnum.ReadOnly)) {
#>
                        <TextField fullWidth  InputLabelProps={{ shrink: true }}
                            value={ this.ValForInput(this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value) }
                            error={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid }
                            label="<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#>"
                            helperText={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid ? 
                                this.getErrorMessage(this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>) as string : 
                                '<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty) #>'
                            }
                            margin="dense" variant="outlined" disabled={true} 
                            multiline rows={1} rowsMax={3}
<#
                                        if(hasButton) {
#>
                            InputProps={{
                              endAdornment: (
                                <InputAdornment position="end">
                                    <IconButton color="primary" size="small" 
                                        disabled={this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>} 
                                        onClick={this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>}>
                                            <Icon color="primary" >search</Icon> 
                                    </IconButton>            
                                </InputAdornment>)              
                            }}
<#
                                        }
#>
                        />
<#
                                        } else {
#>
                        <TextField fullWidth  InputLabelProps={{ shrink: true }}
                            onChange={ this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, NoSufix) #> }
                            value={ this.ValForInput(this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value) }
                            error={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid }
                            label="<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#>"
                            helperText={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid ? 
                                this.getErrorMessage(this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>) as string : 
                                '<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty) #>'
                            }
                            margin="dense" variant="outlined" disabled={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled }
                            multiline rows={1} rowsMax={3}
<#
                                        if(hasButton) {
#>
                            InputProps={{
                              endAdornment: (
                                <InputAdornment position="end">
                                    <IconButton color="primary" size="small" 
                                        disabled={this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>} 
                                        onClick={this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>}>
                                            <Icon color="primary" >search</Icon> 
                                    </IconButton>            
                                </InputAdornment>)              
                            }}
<#
                                        }
#>
                        />
<#
                                        }
                                    } // end IsMemoInput
                                    else {
                                        if (hasButton || (InputTypeWhenXXX == InputTypeEnum.ReadOnly)) {
                                            string formatterName = GetFormatters(modelViewUIFormPropertySerializable, Model);
#>
                        <TextField fullWidth  InputLabelProps={{ shrink: true }}
                            value={ this.ValForInput(this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value) }
                            error={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid }
                            label="<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#>"
                            helperText={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid ? 
                                this.getErrorMessage(this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>) as string : 
                                '<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty) #>'
                            }
                            margin="dense" variant="outlined" disabled={true} 
<#                                          if( !string.IsNullOrEmpty(formatterName) ) { #>
                            InputProps={{
                                 inputComponent:  <#= formatterName #> as any
                            }}
<#                                          } #>
<#
                                        if(hasButton) {
#>
                            InputProps={{
                              endAdornment: (
                                <InputAdornment position="end">
                                    <IconButton color="primary" size="small" 
                                        disabled={this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>} 
                                        onClick={this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>}>
                                            <Icon color="primary" >search</Icon> 
                                    </IconButton>            
                                </InputAdornment>)              
                            }}
<#
                                        }
#>
                        />
<#
                                        } else {
                                            string formatterName = GetFormatters(modelViewUIFormPropertySerializable, Model);
#>
                        <TextField fullWidth  InputLabelProps={{ shrink: true }}
                            onChange={ this.<#= GetExpressionForBaseOnChangedMethodWithSufix(modelViewUIFormPropertySerializable, Model, NoSufix) #> }
                            value={ this.ValForInput(this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value) }
                            error={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid }
                            label="<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#>"
                            helperText={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Invalid ? 
                                this.getErrorMessage(this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>) as string : 
                                '<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty) #>'
                            }
                            margin="dense" variant="outlined" disabled={ this.state.<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Disabled }
<#                                          if( !string.IsNullOrEmpty(formatterName) ) { #>
                            InputProps={{
                                 inputComponent:  <#= formatterName #> as any
                            }}
<#                                          } #>

<#
                                        if(hasButton) {
#>
                            InputProps={{
                              endAdornment: (
                                <InputAdornment position="end">
                                    <IconButton color="primary" size="small" 
                                        disabled={this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>} 
                                        onClick={this.<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>}>
                                            <Icon color="primary" >search</Icon> 
                                    </IconButton>            
                                </InputAdornment>)              
                            }}
<#
                                        }
#>
                        />
<#
                                    }
                                }
                            }
                        }
#>
                </span>
<#
                    } // if (!((InputTypeWhenXXX == InputTypeEnum.Combo) || (InputTypeWhenXXX == InputTypeEnum.Typeahead))) {}
                    switch (InputTypeId) {
                        case 1:
                            AddCnt++;
                            break;
                        case 2:
                            UpdateCnt++;
                            break;
                        case 3:
                            DeleteCnt++;
                            break;
                    } 

                } // if (InputTypeWhenXXX != InputTypeEnum.Hidden) {
        } // if (modelViewUIFormPropertySerializable.IsShownInView) {
        if(modelViewUIFormPropertySerializable.IsNewLineAfter) {
#>
        </div>
        <hr className="<#= fxFlexBaseRowCssClassName #>" style={ <#= colFlexFunctionName #>({ dflt: '99%' })  as CSSProperties }/>
        <div className="<#= fxFlexBaseRowCssClassName #>" style={<#= rowFlexFunctionName #>({ dflt: 'row' }) as CSSProperties}>
<#
            isNewLine = true;
            AddCnt = 0;
            UpdateCnt = 0;
            DeleteCnt = 0;
        }
    } // for(int i = 0; i < Model.UIFormProperties.Count; i++) {
}
#>
        </div>

<# //////////////////////////// start SearchButtonClick()-modals
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if ((GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, InputTypeId) == InputTypeEnum.SearchDialog) &&  modelViewUIFormPropertySerializable.IsShownInView) {
                ModelViewSerializable locView = GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, InputTypeId);
                    if(locView == null) {
#>
//
// error: Could not find model for for the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> with a method GetViewForControlList
// 
<#              
                        continue;                            
                    }
#>
        <<#= GetModelComponentClassName(locView, sdlgComponentDataModelFolder) #>
            open={ this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, OpenModalSufix) #> }
            maxWidth={ <#= appGlblSettingsServiceClassName #>.getDialogWidth('<#= locView.ViewName #>') }
            caption='<#= TitleCaptionVal #>'
            maxHeight={6}
            filterMaxHeight={2}
            showAddFltItem={true}
            showFilter={true}
            <#= HiddenFilterPropName #> = { this.state.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, HiddenFilterModalSufix) #> }
            onClose = { this.<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchCloseSufix) #> }
        />
<# 
            }
        }
   //////////////////////////// end SearchButtonClick()-modals
#>
    </div>
</MuiPickersUtilsProvider>
            ); // end of return ()
<#
        if (InputTypeId < 3) {
#>
        }
<#
        }
#>

<#
    }
#>
    }
}

<#+
    string GetInputTypeToEnumName(int inputType) {
        switch(inputType) {
            case 1:
                return "AddMode";
            case 2:
                return "UpdateMode";
            default:
                return "DeleteMode";
        }
    }
    InputTypeEnum GetInputTypeWhenXXX(ModelViewUIFormPropertySerializable prop, int inputType) {
        switch(inputType) {
            case 1:
                return prop.InputTypeWhenAdd;
            case 2:
                return prop.InputTypeWhenUpdate;
            default:
                return prop.InputTypeWhenDelete;
        }
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetInterfacePageName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfaceFilterName(ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    string GetJavaScriptServiceNameForViewName(string ViewName) {
        string  result = ViewName + "Service";
        return result.First().ToString().ToUpper() + result.Substring(1);
    }
    string GetJavaScriptServiceName(ModelViewSerializable model) {
        if(model != null)
            return GetJavaScriptServiceNameForViewName(model.ViewName);
        else 
            return GetJavaScriptServiceNameForViewName("");
    }
    string GetModelComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","-component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetModelInterfaceName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","-interface");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I"+sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetContextFunctionName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }
    string GetContextInterfaceName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","-interface");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I"+sb.ToString();
    }
    string GetContextCssClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName;
    }
    string GetContextClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) {
            return "Noname";
        }
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetTypeScriptPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetTypeScriptPropertyName(sclrProp, model);
    }
    bool HasCombo(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  (prop.InputTypeWhenAdd == InputTypeEnum.Combo) || 
                (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) || 
                (prop.InputTypeWhenDelete == InputTypeEnum.Combo);
    }
    bool HasButton(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) || 
            (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
            (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog);
    }
    bool HasTypeahead(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead) || 
            (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
            (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead);
    }
    string GetTypeScriptPropertyNameWithSufix(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return GetTypeScriptPropertyNameEx(prop, model) + sufix;
    }
    string GetExpressionForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return  GetTypeScriptPropertyNameWithSufix(prop, model, sufix) + "Vals";
    }
    string GetViewByForeignNameChain(DbContextSerializable context, string ViewName, string foreignKeyNameChain) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (mv == null)
        {
            return "";
        }
        if (string.IsNullOrEmpty(foreignKeyNameChain))
        {
            return ViewName;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        if (foreignKeys.Length < 1)
        {
            return "";
        }
        ModelViewForeignKeySerializable fk = 
            mv.ForeignKeys.Where(f => f.NavigationName == foreignKeys[0]).FirstOrDefault();
        if (fk == null)
        {
            return "";
        }
        if (foreignKeys.Length == 1)
        {
            return GetViewByForeignNameChain(context, fk.ViewName, "");
        }
        return GetViewByForeignNameChain(context, fk.ViewName, string.Join(".", foreignKeys, 1, foreignKeys.Length - 1));
    }

    List<string> CollectComboItemInterfaces(DbContextSerializable context, 
                                            ModelViewUIFormPropertySerializable prop, 
                                            ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.Combo)   {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add( GetInterfaceName(mv) );
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }

    List<string> CollectComboListInterfaces(DbContextSerializable context, 
                                            ModelViewUIFormPropertySerializable prop, 
                                            ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.Combo)   {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add("Array<" + GetInterfaceName(mv) + ">");
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    List<string> CollectButtonItemInterfaces(DbContextSerializable context, 
                                             ModelViewUIFormPropertySerializable prop, 
                                             ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add( GetInterfaceName(mv) );
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog)  {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    List<string> CollectTypeaheadItemInterfaces(DbContextSerializable context, 
                                                ModelViewUIFormPropertySerializable prop, 
                                                ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead)   {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add( GetInterfaceName(mv) );
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead) {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    List<string> CollectTypeaheadListInterfaces(DbContextSerializable context, 
                                                ModelViewUIFormPropertySerializable prop, 
                                                ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead)   {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add("Array<" + GetInterfaceName(mv) + ">");
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead) {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    string GetContextEnumClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".enum","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }
    string GetContextServiceClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","-service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetContextContextName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".context","-context");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }

    bool HasAtribute(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName))) {
            if (sclrProp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in sclrProp.Attributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    bool HasAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in sclrProp.Attributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasFluentAtribute(ModelViewPropertyOfVwSerializable sclrProp, string[] attrName) {
        if ((sclrProp != null) && (attrName != null)  ) {
            if ((sclrProp.FAPIAttributes != null) && (attrName.Length > 0)) {
                return sclrProp.FAPIAttributes.Any(a => attrName.Contains(a.AttrName));
            }
        }
        return false;
    }
    bool HasFluentAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.FAPIAttributes != null) {
                foreach(ModelViewFAPIAttributeSerializable a in sclrProp.FAPIAttributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewFAPIAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    bool IsBooleanInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if((prop == null) || (model == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        return"System.Boolean".Equals(sclrProp.UnderlyingTypeName) || "Boolean".Equals(sclrProp.UnderlyingTypeName) || "bool".Equals(sclrProp.UnderlyingTypeName);
    }
    bool IsIdentityProperty(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (HasAtribute(prop, "ConcurrencyCheck") || HasAtribute(prop, "Timestamp")) {
            return true;
        }
        if (HasAtributeWithValue(prop, "DatabaseGenerated", "identity") || HasAtributeWithValue(prop, "DatabaseGenerated", "computed")) {
            return true;
        }
        if(HasFluentAtribute(prop, new string[] {"UseSqlServerIdentityColumn", "ForSqlServerUseSequenceHiLo", "ValueGeneratedOnAdd", "ValueGeneratedOnAddOrUpdate", "IsConcurrencyToken", "IsRowVersion"} )) {
            return true;
        }
        return HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "identity") || HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "computed");
    }
    bool IsIdentityPropertyEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) {
            return false;
        }
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if(sclrProp == null) {
            return false;
        }
        return IsIdentityProperty(sclrProp, model);
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeUnNamedValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeNamedValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrProp) {
        if ((sclrProp != null) && (!(string.IsNullOrEmpty(attrProp)))) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (p.PropName == attrProp)).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetFluentAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if ((sclrProp != null) && (!(string.IsNullOrEmpty(attrName)))) {
            if (sclrProp.FAPIAttributes != null) {
                ModelViewFAPIAttributeSerializable modelViewFAPIAttributeSerializable =
                    sclrProp.FAPIAttributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewFAPIAttributeSerializable != null) {
                    if (modelViewFAPIAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewFAPIAttributePropertySerializable modelViewFAPIAttributePropertySerializable =
                            modelViewFAPIAttributeSerializable.VaueProperties.FirstOrDefault();
                        if (modelViewFAPIAttributePropertySerializable != null) {
                            return modelViewFAPIAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }

    List<string> GetValidators(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, Dictionary<string, string> regExps, string ValidatorsName) {
        List<string> result = new List<string>();
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if(sclrProp == null) {
            return result;
        }
        if(sclrProp.IsRequiredInView) {
            result.Add(ValidatorsName+".required");
        }
        bool hasCurrencyAttr = false;
        if(sclrProp.Attributes != null) {
            hasCurrencyAttr = sclrProp.Attributes.Any(a => a.AttrName == "DataType" && a.VaueProperties.Any(p => p.PropValue == "DataType.Currency"));
        }
        string propValue = null;
        switch( sclrProp.UnderlyingTypeName.ToLower() ) {
            case "system.int16":
            case "system.int32":
            case "system.int64":
            case "system.uint16":
            case "system.uint32":
            case "system.uint64":
                bool hasNoMin = true;
                bool hasNoMax = true;
                if (hasCurrencyAttr) {
                    result.Add(ValidatorsName+".pattern("+ regExps["RegExpCurrency"] +")");
                } else {
                    result.Add(ValidatorsName+".pattern("+ regExps["RegExpInteger"] +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "IntegerValidator", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    hasNoMin = false;
                    result.Add(ValidatorsName+".min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "IntegerValidator", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    hasNoMax = false;
                    result.Add(ValidatorsName+".max("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    hasNoMin = false;
                    result.Add(ValidatorsName+".min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    hasNoMax = false;
                    result.Add(ValidatorsName+".max("+ propValue.Replace("\"", "") +")");
                }
                if ((hasNoMin) || (hasNoMax)) {
                    switch(sclrProp.UnderlyingTypeName.ToLower()) {
                        case "system.int16":
                            if(hasNoMin) {
                                result.Add(ValidatorsName+".min(32766)");
                            }
                            if(hasNoMax) {
                                result.Add(ValidatorsName+".min(-32766)");
                            }
                        break;
                        case "system.int32":
                            if(hasNoMin) {
                                result.Add(ValidatorsName+".max(2147483640)");
                            }
                            if(hasNoMax) {
                                result.Add(ValidatorsName+".min(-2147483640)");
                            }
                        break;
                        case "system.uint16":
                            if(hasNoMin) {
                                result.Add(ValidatorsName+".max(65534)");
                            }
                            if(hasNoMax) {
                                result.Add(ValidatorsName+".min(0)");
                            }
                        break;
                        case "system.uint32":
                            if(hasNoMin) {
                                result.Add(ValidatorsName+".max(4294967290)");
                            }
                            if(hasNoMax) {
                                result.Add(ValidatorsName+".min(0)");
                            }
                        break;
                    }
                }
                break;
            case "system.guid":
                result.Add(ValidatorsName+".pattern("+ regExps["RegExpGuid"] +")");
                break;
            case "system.double":
            case "system.decimal":
            case "system.single":
                if (hasCurrencyAttr) {
                    result.Add(ValidatorsName+".pattern("+ regExps["RegExpCurrency"] +")");
                } else {
                    result.Add(ValidatorsName+".pattern("+ regExps["RegExpFloat"] +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add(ValidatorsName+".min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add(ValidatorsName+".max("+ propValue.Replace("\"", "") +")");
                }
                break;
            case "system.string":
                propValue = GetAtributeUnNamedValue(sclrProp, "StringLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add(ValidatorsName+".maxLength("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeUnNamedValue(sclrProp, "MaxLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add(ValidatorsName+".maxLength("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeUnNamedValue(sclrProp, "MinLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add(ValidatorsName+".minLength("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeNamedValue(sclrProp, "StringLength", "MinimumLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add(ValidatorsName+".minLength("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetFluentAtributeValue(sclrProp, "HasMaxLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add(ValidatorsName+".maxLength("+ propValue.Replace("\"", "") +")");
                }
                break;
        }
        return result;
    }
    int GetXXX1Wdth(int w, int inPercentEq100) {
        if ((w > 5) && (w < inPercentEq100)) {
            w-=1;
        }
        return w;
    }
    string GetExpressionForBaseOnChangedMethodWithSufix(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        if(string.IsNullOrEmpty(sufix)) {
            return  "onChanged" + GetTypeScriptPropertyNameEx(prop, model);
        } else {
            return  "onChanged" + sufix + GetTypeScriptPropertyNameEx(prop, model);
        }
    }
    string GetExpressionForBaseOnInputMethodWithSufix(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        if(string.IsNullOrEmpty(sufix)) {
            return  "onInput" + GetTypeScriptPropertyNameEx(prop, model);
        } else {
            return  "onInput" + sufix + GetTypeScriptPropertyNameEx(prop, model);
        }
    }
    string GetExpressionForBaseOnOpenMethodWithSufix(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        if(string.IsNullOrEmpty(sufix)) {
            return  "onOpen" + GetTypeScriptPropertyNameEx(prop, model);
        } else {
            return  "onOpen" + sufix + GetTypeScriptPropertyNameEx(prop, model);
        }
    }
    string GetExpressionForOnValChangedMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  "onValChanged" + GetTypeScriptPropertyNameEx(prop, model);
    }
    string GetTypeaheadControlListPropertyName(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return "NoName";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (mv == null)
        {
            return "NoName";
        }
        ModelViewPropertyOfVwSerializable propForSel =
            mv.ScalarProperties.Where(p => (string.IsNullOrEmpty(p.ForeignKeyNameChain) && p.OriginalPropertyName == prop.OriginalPropertyName)).FirstOrDefault();
        if (propForSel == null) {
            return "NoName";
        }
        return GetTypeScriptPropertyName(propForSel, model);
    }
    string GetDisplayAttributeValueString(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    int GetGreaterThanPercent(int currCnt, int maxCnt, int[] wdths, int inPercentEq100) {
        int result = wdths[1];
        if (currCnt < maxCnt) {
            result = wdths[0];
        } 
        if (result == 100) {
            result = inPercentEq100;
        }
        if ((result > 5) && (result < inPercentEq100)) result -= 1;
        return result;
    }
    string GetComboControlListPropertyName(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return "NoName";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (mv == null)
        {
            return "NoName";
        }
        ModelViewPropertyOfVwSerializable propForSel =
            mv.ScalarProperties.Where(p => (string.IsNullOrEmpty(p.ForeignKeyNameChain) && p.OriginalPropertyName == prop.OriginalPropertyName)).FirstOrDefault();
        if (propForSel == null) {
            return "NoName";
        }
        return GetTypeScriptPropertyName(propForSel, model);
    }
    bool IsDateTimeInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if((prop == null) || (model == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        return ("System.DateTime".Equals(sclrProp.UnderlyingTypeName) || "DateTime".Equals(sclrProp.UnderlyingTypeName));
    }
    bool IsDateInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if(IsDateTimeInput(prop, model)) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if(sclrProp == null) return false;
            string rsltStr = GetAtributeUnNamedValue(sclrProp, "DataType");
            if(string.IsNullOrEmpty(rsltStr)) return false;
            return (  (String.Compare("DataType.Date", rsltStr) == 0) || (String.Compare("Date", rsltStr) == 0)  ); 
        }
        return false;
    }
    bool HasButton(InputTypeEnum inputType) {
        if (inputType == InputTypeEnum.SearchDialog) {
            return true;
        }
        return false;
    }
    bool IsMemoInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if((prop == null) || (model == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        if (!("System.String".Equals(sclrProp.UnderlyingTypeName) || "String".Equals(sclrProp.UnderlyingTypeName))) {
            return false;
        }
        if(sclrProp.Attributes != null) {
            if(sclrProp.Attributes.Where(a => (a.AttrName == "MaxLength") || (a.AttrName == "StringLength")).Any()) {
                return false;
            }
        }
        if(sclrProp.FAPIAttributes != null) {
            if(sclrProp.FAPIAttributes.Where(a => a.AttrName == "HasMaxLength").Any()) {
                return false;
            }
        }
        return true;
    }
    string GetExpressionForOnInitMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  "onInit" + GetTypeScriptPropertyNameEx(prop, model);
    }
    bool HasInitMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return HasCombo(prop, model) ||  HasButton(prop, model) || HasTypeahead(prop, model);
    }
    bool HasInitMethodForInputMode(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, int inputType) {
        switch(inputType) {
            case 1:
                return
                    (prop.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead);
                break;
            case 2:
                return
                    (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead);
                break;
            case 3:
                return
                    (prop.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead);
                break;
        }
        return false;
    }
    bool HasModelInitMethodForInputMode(ModelViewSerializable model, int inputType) {
        if (model == null) {
            return false;
        }
        if (model.UIFormProperties == null) {
            return false;
        }
        foreach(ModelViewUIFormPropertySerializable prop in model.UIFormProperties) {
            if(HasInitMethodForInputMode(prop, model, inputType)) {
                return true;
            }
        }
        return false;
    }
    List<ModelViewUIFormPropertySerializable> 
        GetDirectDetails(ModelViewUIFormPropertySerializable prop,
                         ModelViewSerializable model, 
                         DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            return result;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
        if (foreignKeys.Length < 2) {
            return result;
        }
        string fltFKNameChain  = string.Join(".", foreignKeys, 0, foreignKeys.Length - 1);
        List<ModelViewUIFormPropertySerializable> propLst = null;
        switch(inputType) {
            case 1:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenAdd == InputTypeEnum.SearchDialog))).ToList();
                break;
            case 2:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenUpdate == InputTypeEnum.SearchDialog))).ToList();
                break;
            case 3:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenDelete == InputTypeEnum.SearchDialog))).ToList();
                break;
            default:
                break;
        }
        if (propLst != null) {
            return propLst;
        }
        return result;
    }
    string GetViewNameForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType) {
        ModelViewSerializable mv =
            GetViewForControlList(prop, model, context, inputType);
        if (mv == null)
        {
            return "NoName";
        }
        return mv.ViewName;
    }
    List<ModelViewPropertyOfVwSerializable> GetPrimaryKeyProps(DbContextSerializable context, string viewName) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return result;
        }
        return GetModelPrimaryKeyProps( context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault() );
    }
    List<ModelViewUIFormPropertySerializable> 
        GetDirectMasters(ModelViewUIFormPropertySerializable prop,
                         ModelViewSerializable model, 
                         DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string viewNameForSel = GetViewNameForControlList(prop, model, context, inputType);
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return result;
        }
        ModelViewSerializable modelViewSerializable = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (modelViewSerializable == null)
        {
            return result;
        }
        if (modelViewSerializable.ForeignKeys == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            foreignKeyNameChain = "";
        } else {
            foreignKeyNameChain += ".";
        }
        foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in modelViewSerializable.ForeignKeys) {
            if (!string.IsNullOrEmpty(modelViewForeignKeySerializable.ViewName)) {
                string fltFKNameChain = foreignKeyNameChain + modelViewForeignKeySerializable.NavigationName;
                List<ModelViewUIFormPropertySerializable> propLst = null;
                switch(inputType) {
                    case 1:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenAdd == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    case 2:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenUpdate == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    case 3:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenDelete == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    default:
                        break;
                }
                if (propLst != null) {
                    result.AddRange(propLst);
                }
            }
        }
        return result;
    }
    string GetPrimKeyVarName(ModelViewPropertyOfVwSerializable pkpModelViewUIFormPropertySerializable) {
        return "pkp" + pkpModelViewUIFormPropertySerializable.ViewPropertyName;
    }
    bool MustHaveDirectDetails(ModelViewUIFormPropertySerializable prop,
                               ModelViewSerializable model, 
                               DbContextSerializable context) {
        bool result = false;
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            return result;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
        if (foreignKeys.Length < 2) {
            return result;
        }
        return true;
    }
    List<ModelViewPropertyOfVwSerializable> GetForeignKeyPropsBase(DbContextSerializable context, ModelViewSerializable model,
                                            ModelViewUIFormPropertySerializable masterProp) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((context == null) || (masterProp == null) ||  (model == null)) {
            return result;
        }
        string masterForeignKeyNameChain = masterProp.ForeignKeyNameChain;
        if(string.IsNullOrEmpty(masterForeignKeyNameChain)) {
            return GetModelPrimaryKeyProps(model);
        } else {
                if(model.ForeignKeys == null) {
                    return result;
                }
                string[] fKchain = masterForeignKeyNameChain.Split(new string[] {"."}, StringSplitOptions.None);
                if (fKchain.Length != 1) {
                    return result;
                }
                ModelViewForeignKeySerializable foreignKey =
                    model.ForeignKeys.Where(f => f.NavigationName == fKchain[0]).FirstOrDefault();
                if(foreignKey == null) {
                    return result;
                }
                if ((foreignKey.ForeignKeyProps == null) || (foreignKey.PrincipalKeyProps == null)) {
                    return result;
                }
                if (foreignKey.ForeignKeyProps.Count !=  foreignKey.PrincipalKeyProps.Count) {
                    return result;
                }
                for(int i = 0; i < foreignKey.ForeignKeyProps.Count; i++) {
                    ModelViewKeyPropertySerializable fkProp = foreignKey.ForeignKeyProps[i];
                    ModelViewPropertyOfVwSerializable scProp = 
                        model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (string.IsNullOrEmpty( p.ForeignKeyName )) ).FirstOrDefault();
                    if (scProp != null) {
                        result.Add(scProp);
                    } else {
                        ModelViewKeyPropertySerializable pkProp = foreignKey.PrincipalKeyProps[i];
                        scProp = 
                            model.ScalarProperties.Where(p => (p.OriginalPropertyName == pkProp.OriginalPropertyName) && (p.ForeignKeyName == foreignKey.NavigationName) ).FirstOrDefault();
                        if (scProp != null) {
                            result.Add(scProp);
                        }
                    }
                }
        }
        return result;
    }
    ModelViewSerializable GetViewForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        if ((prop == null) || (model == null) || (context == null)) {
            return null;
        }
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
    }
    List<ModelViewPropertyOfVwSerializable> GetForeignKeyProps(DbContextSerializable context, ModelViewSerializable model,
                                            ModelViewUIFormPropertySerializable masterProp, ModelViewUIFormPropertySerializable detailProp, int inputType) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((context == null) || (masterProp == null) || (detailProp == null) || (model == null)) {
            return result;
        }
        string masterForeignKeyNameChain = masterProp.ForeignKeyNameChain;
        if(string.IsNullOrEmpty(masterForeignKeyNameChain)) {
            return result;
        }
        string detailForeignKeyNameChain = detailProp.ForeignKeyNameChain;
        if( ! string.IsNullOrEmpty(detailProp.ForeignKeyNameChain) ) {
            masterForeignKeyNameChain = masterForeignKeyNameChain.Replace(detailProp.ForeignKeyNameChain + ".", "");
        }
        string[] fKchain = masterForeignKeyNameChain.Split(new string[] {"."}, StringSplitOptions.None);
        if (fKchain.Length < 1) {
            return result;
        }
        ModelViewSerializable detailModel = GetViewForControlList(detailProp, model, context, inputType);
        if(detailModel == null) {
            return result;
        }
        if(detailModel.ForeignKeys == null) {
            return result;
        }
        ModelViewForeignKeySerializable foreignKey =
            detailModel.ForeignKeys.Where(f => f.NavigationName == fKchain[0]).FirstOrDefault();
        if(foreignKey == null){
            return result;
        }
        if(foreignKey.ForeignKeyProps == null) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable scProp = 
                detailModel.ScalarProperties.Where(p => p.ViewPropertyName == fkProp.ViewPropertyName).FirstOrDefault();
            if (scProp != null) {
                result.Add(scProp);
            }
        }
        return result;
    }
    string GetExpressionForOnUpdateComboControlListMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string comboSufix) {
        return  "onUpdate" + GetExpressionForControlList(prop, model, comboSufix);
    }
    string GetInterfaceNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfaceName(model);
    }
    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                    if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                        prop =
                                        model.ScalarProperties.Where(p => 
                                            (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                            &&
                                            (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                        ).FirstOrDefault();
                                    }
                                }
                                if(prop != null) break;
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        result.Add(prop);
                    }
                }
            }
        }
        return result;
    }
    string GetControlListPropertyName(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return "NoName";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (mv == null)
        {
            return "NoName";
        }
        ModelViewPropertyOfVwSerializable propForSel =
            mv.ScalarProperties.Where(p => (string.IsNullOrEmpty(p.ForeignKeyNameChain) && p.OriginalPropertyName == prop.OriginalPropertyName)).FirstOrDefault();
        if (propForSel == null) {
            return "NoName";
        }
        return GetTypeScriptPropertyName(propForSel, mv);
    }

    string GetOrderBy(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType, string prefix) {
        string propName = GetControlListPropertyName(prop, model, context, inputType);
        if ( "Noname".Equals(propName,StringComparison.OrdinalIgnoreCase) || string.IsNullOrEmpty(propName) ) {
            return "";
        }
        return prefix + ".orderby=['"+propName+"'];";
    }
    string GetInterfacePageNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfacePageName(model);
    }
    string GetPrimKeyFilterForFindIndexMethod(DbContextSerializable context, string ViewName, string srcPrefix, string destPrefix) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "false";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (model == null)
        {
            return "false";
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null))
        {
            return "false";
        }
        string result = "";
        foreach(ModelViewKeyPropertySerializable keyProp in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable =
                model.ScalarProperties.Where(p => p.ViewPropertyName == keyProp.ViewPropertyName).FirstOrDefault();
            if (modelViewPropertyOfVwSerializable != null) {
                string proName = GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, model);
                if(result != "") {
                    result += " && ";
                }
                result += "("+ srcPrefix + "." + proName + " === " + destPrefix + "." + proName + ")";
            }
        }
        if (result == "") {
            return "false";
        }
        return result;
    }
    List<ModelViewPropertyOfVwSerializable> GetAllForeignKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if(model == null) {
            return result;
        }
        if ((model.ForeignKeys == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
            if (!string.IsNullOrEmpty(fk.ViewName)) {
                if (fk.ForeignKeyProps != null) {
                    foreach(ModelViewKeyPropertySerializable fkProp in fk.ForeignKeyProps) {
                        ModelViewPropertyOfVwSerializable sclrProp =
                            model.ScalarProperties.Where(p => p.ViewPropertyName == fkProp.ViewPropertyName).FirstOrDefault();
                        if(sclrProp != null) {
                            result.Add(sclrProp);
                        }
                    }
                }
            }
        }
        return result;
    }
    List<ModelViewPropertyOfVwSerializable> GetModelForeignKeyProps(ModelViewSerializable model, string detailFkChain, string masterFkChain) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || string.IsNullOrEmpty(masterFkChain))
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null) || (model.ForeignKeys == null)) {
            return result;
        }
        if(string.IsNullOrEmpty(detailFkChain)) {
            detailFkChain = "";
        } else {
            detailFkChain += ".";
        }
        string[] chain = masterFkChain.Replace(detailFkChain, "").Split(new string[] {"."}, StringSplitOptions.None);
        if(chain.Length < 1) {
            return result;
        }
        ModelViewForeignKeySerializable  foreignKeySerializable =
            model.ForeignKeys.Where(f => f.NavigationName == chain[0]).FirstOrDefault();
        if(foreignKeySerializable == null) {
            return result;
        }
        if ((foreignKeySerializable.ForeignKeyProps == null) || (foreignKeySerializable.PrincipalKeyProps == null)) {
            return result;
        }
        if(foreignKeySerializable.ForeignKeyProps.Count != foreignKeySerializable.PrincipalKeyProps.Count)
        {
            return result;
        }
        for(int i = 0; i < foreignKeySerializable.ForeignKeyProps.Count; i++) {
            ModelViewKeyPropertySerializable modelViewKeyPropertySerializable = foreignKeySerializable.ForeignKeyProps[i];
            ModelViewPropertyOfVwSerializable prop =
                    model.ScalarProperties.Where(p => ((p.OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                modelViewKeyPropertySerializable = foreignKeySerializable.PrincipalKeyProps[i];
                prop =
                    model.ScalarProperties.Where(p => ((p.OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName) && (p.ForeignKeyName == foreignKeySerializable.NavigationName))).FirstOrDefault();
                if (prop != null)
                {
                    result.Add(prop);
                }
            }
        }
        return result;
    }
    string GetExpressionForOnFilterTypeaheadControlListMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string typeaheadSufix) {
        return  "onFilter" + GetExpressionForControlList(prop, model, typeaheadSufix);
    }
    bool HasOnValChangedMethod(DbContextSerializable context, ModelViewSerializable model,
                                ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable) {
        bool result = false;
        for (int inputType = 1 ; inputType < 4; inputType++) {
            result = 
                (GetDirectDetails(modelViewUIFormPropertySerializable, model, context, inputType).Count > 0) ||
                (GetDependentScalarProps(modelViewUIFormPropertySerializable, model, context, inputType).Count > 0);
            if (result) {
                return result;
            }
        }
        return result;
    }
    ModelViewPropertyOfVwSerializable GetTypeAheadMasterProp(ModelViewSerializable model, ModelViewPropertyOfVwSerializable dependentScalarProp, ModelViewSerializable master) {
        if ( (dependentScalarProp == null) || (model == null) || (master == null) ) {
            return null;
        }
        return
              master.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
    }

    ModelViewPropertyOfVwSerializable GetTypeAheadMasterPropEx(ModelViewSerializable model, ModelViewUIFormPropertySerializable dependentScalarProp, ModelViewSerializable master) {
        if ( (dependentScalarProp == null) || (model == null) || (master == null) ) {
            return null;
        }
        ModelViewPropertyOfVwSerializable prop =
            model.ScalarProperties.Where(p => p.ViewPropertyName == dependentScalarProp.ViewPropertyName).FirstOrDefault();
        return GetTypeAheadMasterProp(model, prop, master);
    }
    List<ModelViewUIFormPropertySerializable> 
        GetDependentScalarProps(ModelViewUIFormPropertySerializable prop,
                                ModelViewSerializable model, 
                                DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ((prop == null) || (model == null) || (context == null)) {
            return result;
        }
        if (model.UIFormProperties == null)  {
            return result;
        }
        if(!HasInitMethodForInputMode(prop, model, inputType)) {
            return result;
        }
        string currentPropChain = string.IsNullOrEmpty(prop.ForeignKeyNameChain) ? "" : prop.ForeignKeyNameChain;
        List<ModelViewUIFormPropertySerializable> masters = GetDirectMasters(prop, model, context, inputType);
        foreach(ModelViewUIFormPropertySerializable dependentProp in model.UIFormProperties) {
            if(prop.ViewPropertyName == dependentProp.ViewPropertyName) {
                result.Add(dependentProp);
                continue;
            }
            if(HasInitMethodForInputMode(dependentProp, model, inputType)) {
                continue;
            }
            string dependentPropChain = string.IsNullOrEmpty(dependentProp.ForeignKeyNameChain) ? "" :  dependentProp.ForeignKeyNameChain;
            if(dependentPropChain == currentPropChain) {
                result.Add(dependentProp);
                continue;
            }
            string locCurrentPropChain = currentPropChain;
            if (!string.IsNullOrEmpty(locCurrentPropChain)) locCurrentPropChain += ".";
            if (!dependentPropChain.StartsWith(locCurrentPropChain)) {
                continue;
            }
            if (!masters.Where(p => dependentPropChain.StartsWith(p.ForeignKeyNameChain)).Any()) {
                result.Add(dependentProp);
            }
        }
        return result;
    }
     List<string> GetHiddenFilterDisablingFields(ModelViewSerializable model, DbContextSerializable context, string foreignKeyNameChain, List<string> result)
        {
            if (result == null)
            {
                result = new List<string>();
            }
            if( string.IsNullOrEmpty(foreignKeyNameChain) || (model == null) || (context == null))
            {
                return result;
            }
            string masterNm = GetViewByForeignNameChain(context, model.ViewName, foreignKeyNameChain);
            if (string.IsNullOrEmpty(masterNm))
            {
                return result;
            }
            ModelViewSerializable master = context.ModelViews.Where(m => m.ViewName == masterNm).FirstOrDefault();
            if (master == null)
            {
                return result;
            }
            if ((master.PrimaryKeyProperties != null) && (master.ScalarProperties != null))
            {
                foreach(ModelViewKeyPropertySerializable pkProp in master.PrimaryKeyProperties)
                {
                    ModelViewPropertyOfVwSerializable masterProp = master.ScalarProperties.Where(s => s.ViewPropertyName == pkProp.ViewPropertyName).FirstOrDefault();
                    List<ModelViewPropertyOfVwSerializable> props =
                        GetForeignKeyPropByIndirectPrimaryKeyProp(model, foreignKeyNameChain, master, context, masterProp);
                    if(props != null)
                    {
                        foreach(ModelViewPropertyOfVwSerializable prop in props)
                        {
                            string propName =  GetTypeScriptPropertyName(prop, model);
                            if(!result.Contains(propName))
                            {
                                result.Add(propName);
                            }
                        }
                    }
                }
            }
            string[] fKchain = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
            if (fKchain.Length < 2)
            {
                return result;
            }
            string newChain = string.Join(".", fKchain, 0, fKchain.Length - 1);
            return GetHiddenFilterDisablingFields(model, context, newChain, result);
        }
    ModelViewPropertyOfVwSerializable GetOnValChangeViewPropName(DbContextSerializable context, ModelViewSerializable model,
                                ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable, ModelViewUIFormPropertySerializable dependentScalarProp, int inputType) {
        if((dependentScalarProp == null) || (modelViewUIFormPropertySerializable == null)) {
            return null;
        }
        ModelViewSerializable view = GetViewForControlList(modelViewUIFormPropertySerializable, model, context, inputType);
        if(view == null) {
            return null;
        }
        string foreignKeyNameChain = 
            string.IsNullOrEmpty(modelViewUIFormPropertySerializable.ForeignKeyNameChain) ? "" : modelViewUIFormPropertySerializable.ForeignKeyNameChain;
        
        
        string dependentForeignKeyNameChain = 
            (string.IsNullOrEmpty(dependentScalarProp.ForeignKeyNameChain) ? "" : dependentScalarProp.ForeignKeyNameChain);
        if (foreignKeyNameChain == dependentForeignKeyNameChain) {
            dependentForeignKeyNameChain = "";
        } else {
            if (foreignKeyNameChain != "") {
                foreignKeyNameChain += ".";
                dependentForeignKeyNameChain = dependentForeignKeyNameChain.Replace(foreignKeyNameChain, "");
            }
        }
        if (string.IsNullOrEmpty(dependentForeignKeyNameChain)) {
            return
                view.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
        }
        return
            view.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && (p.ForeignKeyNameChain == dependentForeignKeyNameChain)).FirstOrDefault();
    }
    List<ModelViewPropertyOfVwSerializable> GetForeignKeyPropByIndirectPrimaryKeyProp(ModelViewSerializable model, string foreignKeyNameChain, ModelViewSerializable master, DbContextSerializable context, ModelViewPropertyOfVwSerializable masterProp)
        {
            if ((model == null) || (master == null) || (context == null) || (masterProp == null))
            {
                return null;
            }
            if ((master.ScalarProperties == null) || (master.PrimaryKeyProperties == null) || (model.ScalarProperties == null) || (model.PrimaryKeyProperties == null) || (model.ForeignKeys == null))
            {
                return null;
            }
            if (string.IsNullOrEmpty(foreignKeyNameChain))
            {
                return null;
            }
            string[] fKchain = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
            if (fKchain.Length < 1)
            {
                return null;
            }

            List<ModelViewSerializable> modelChain = new List<ModelViewSerializable>();
            ModelViewSerializable currModel = model;
            ModelViewForeignKeySerializable fk = null;
            modelChain.Add(currModel);
            for (int i = 0; i < fKchain.Length; i++)
            {
                if ((currModel.ForeignKeys == null) || (currModel.ScalarProperties == null))
                {
                    return null;
                }
                fk = currModel.ForeignKeys.Where(f => f.NavigationName == fKchain[i]).FirstOrDefault();
                if (fk == null)
                {
                    return null;
                }
                if (string.IsNullOrEmpty(fk.ViewName))
                {
                    return null;
                }
                currModel = context.ModelViews.Where(m => m.ViewName == fk.ViewName).FirstOrDefault();
                if (currModel == null)
                {
                    return null;
                }
                modelChain.Add(currModel);
            }
            if (currModel != master)
            {
                if ((currModel.RootEntityFullClassName != master.RootEntityFullClassName) || (currModel.RootEntityUniqueProjectName != master.RootEntityUniqueProjectName))
                {
                    return null;
                }
                masterProp = currModel.ScalarProperties.Where(p => (p.OriginalPropertyName == masterProp.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyName))).FirstOrDefault();
            }

            List<ModelViewPropertyOfVwSerializable> currProps = new List<ModelViewPropertyOfVwSerializable>();
            List<ModelViewPropertyOfVwSerializable> destProps = new List<ModelViewPropertyOfVwSerializable>();
            currProps.Add(masterProp);
            for (int i = fKchain.Length - 1; i >= 0; i--)
            {
                destProps.Clear();
                fk = modelChain[i].ForeignKeys.Where(f => f.NavigationName == fKchain[i]).FirstOrDefault();
                if (fk == null)
                {
                    return null;
                }
                foreach (ModelViewPropertyOfVwSerializable currProp in currProps)
                {
                    ModelViewPropertyOfVwSerializable destProp = null;
                    if ((fk.PrincipalKeyProps != null) && (fk.ForeignKeyProps != null))
                    {
                        ModelViewKeyPropertySerializable primKey = fk.PrincipalKeyProps.Where(p => p.ViewPropertyName == currProp.ViewPropertyName).FirstOrDefault();
                        if (primKey != null)
                        {
                            int ind = fk.PrincipalKeyProps.IndexOf(primKey);
                            if ((ind > -1) && (ind < fk.ForeignKeyProps.Count))
                            {
                                destProp =
                                    modelChain[i].ScalarProperties.Where(p => p.ViewPropertyName == fk.ForeignKeyProps[ind].ViewPropertyName).FirstOrDefault();
                                if (destProp != null)
                                {
                                    if (!destProps.Contains(destProp))
                                    {
                                        destProps.Add(destProp);
                                    }
                                }
                            }
                        }
                    }
                    destProp =
                        modelChain[i].ScalarProperties.Where(p => (p.OriginalPropertyName == currProp.OriginalPropertyName) && (p.ForeignKeyName == fKchain[i])).FirstOrDefault();
                    if (destProp != null)
                    {
                        if (!destProps.Contains(destProp))
                        {
                            destProps.Add(destProp);
                        }
                    }
                }
                if (destProps.Count < 1)
                {
                    return null;
                }
                else
                {
                    List<ModelViewPropertyOfVwSerializable> tmp = destProps;
                    destProps = currProps;
                    currProps = tmp;
                }
            }
            return currProps;
        }
    List<ModelViewPropertyOfVwSerializable> GetForeignKeyPropByIndirectPrimaryKeyPropEx(ModelViewSerializable model, ModelViewUIFormPropertySerializable uiProp, ModelViewSerializable master, DbContextSerializable context, ModelViewPropertyOfVwSerializable masterProp)
        {
            if ((uiProp == null) || (model == null) || (master == null) || (context == null) || (masterProp == null))
            {
                return null;
            }
            if (model.ScalarProperties == null)
            {
                return null;
            }
            ModelViewPropertyOfVwSerializable sUiProp = model.ScalarProperties.Where(p => p.ViewPropertyName == uiProp.ViewPropertyName).FirstOrDefault();
            return GetForeignKeyPropByIndirectPrimaryKeyProp(model, sUiProp.ForeignKeyNameChain, master, context, masterProp);
        }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    List<string> GetFKViewsList(ModelViewSerializable model, 
                                     DbContextSerializable context,
                                     List<string> fkViewsDict)
    {
        if ((model == null) || (context == null) || (fkViewsDict == null)) {
            return fkViewsDict;
        }
        if (model.ScalarProperties == null || model.UIFormProperties == null) {
            return fkViewsDict;
        }
        string viewNameForSel = null;
        ModelViewSerializable mv = null;
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in model.UIFormProperties) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
        }
        return fkViewsDict;
    }
    List<string> GetSearchDialogViewsList(ModelViewSerializable model, 
                                         DbContextSerializable context,
                                         List<string> sdViewsDict)
    {
        if ((model == null) || (context == null) || (sdViewsDict == null)) {
            return sdViewsDict;
        }
        if (model.ScalarProperties == null || model.UIFormProperties == null) {
            return sdViewsDict;
        }
        string viewNameForSel = null;
        ModelViewSerializable mv = null;
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! sdViewsDict.Contains(viewNameForSel) ) {
                            sdViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! sdViewsDict.Contains(viewNameForSel) ) {
                            sdViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! sdViewsDict.Contains(viewNameForSel) ) {
                            sdViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
        }
        return sdViewsDict;
    }
    string GetCrossComponentFolderName(ModelViewSerializable model, string currFolder, DbContextSerializable context, string refViewName, string refFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(currFolder) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(refViewName)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.ModelViews == null)) {
            return result;
        }
        ModelViewSerializable refModel = context.ModelViews.Where(v => v.ViewName == refViewName).FirstOrDefault();
        if (refModel == null) {
            return result;
        }
        if (refModel.CommonStaffs == null)  {
            return result;
        }
        CommonStaffSerializable refItem= 
            refModel.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","-service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetServiceClassNameEx(DbContextSerializable context, string ViewName, string fileType)
    {
        if ((context == null) || string.IsNullOrEmpty(ViewName) || string.IsNullOrEmpty(fileType))
        {
            return "";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (model == null)
        {
            return "";
        }
        return GetServiceClassName(model, fileType);
    }
    string GetInterfaceFilterNameEx(DbContextSerializable context, string viewName)
    {
        if ((context == null) || string.IsNullOrEmpty(viewName))
        {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null)
        {
            return "I";
        }
        return GetInterfaceFilterName(model);
    }
    string GetComponentClassName(ModelViewSerializable model, string fileType)
    {
        string result = "";
        if ((model == null) || string.IsNullOrEmpty(fileType))
        {
            return result;
        }
        if (model.CommonStaffs == null)
        {
            return result;
        }
        CommonStaffSerializable refItem =
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null)
        {
            return result;
        }
        if (string.IsNullOrEmpty(refItem.FileName))
        {
            return result;
        }
        string fn = refItem.FileName.Replace(".component", "Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if (c == '-')
            {
                toUpper = true;
            }
            else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }

    string GetComponentClassNameEx(DbContextSerializable context, string viewName, string fileType)
    {
        string result = "";
        if ((context == null) || string.IsNullOrEmpty(fileType) || string.IsNullOrEmpty(viewName))
        {
            return result;
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        return GetComponentClassName(model, fileType);
    }
    string GetFormatters(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if(sclrProp == null) return "";
        string rsltStr = GetAtributeUnNamedValue(sclrProp, "DataType");
        if(string.IsNullOrEmpty(rsltStr)) return "";
        if(rsltStr.IndexOf("tobinaryformatter", StringComparison.CurrentCultureIgnoreCase) >= 0) {
            return "BinaryFormatter";
        }
        if(rsltStr.IndexOf("Currency", StringComparison.CurrentCultureIgnoreCase) >= 0) {
            return "CurrencyFormatter";
        }
        return "";
    }


#>